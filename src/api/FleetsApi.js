/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BadRequest', 'model/DeleteFleetsFleetIdMembersMemberIdNotFound', 'model/DeleteFleetsFleetIdSquadsSquadIdNotFound', 'model/DeleteFleetsFleetIdWingsWingIdNotFound', 'model/ErrorLimited', 'model/Forbidden', 'model/GatewayTimeout', 'model/GetCharactersCharacterIdFleetNotFound', 'model/GetCharactersCharacterIdFleetOk', 'model/GetFleetsFleetIdMembers200Ok', 'model/GetFleetsFleetIdMembersNotFound', 'model/GetFleetsFleetIdNotFound', 'model/GetFleetsFleetIdOk', 'model/GetFleetsFleetIdWings200Ok', 'model/GetFleetsFleetIdWingsNotFound', 'model/InternalServerError', 'model/PostFleetsFleetIdMembersInvitation', 'model/PostFleetsFleetIdMembersNotFound', 'model/PostFleetsFleetIdMembersUnprocessableEntity', 'model/PostFleetsFleetIdWingsCreated', 'model/PostFleetsFleetIdWingsNotFound', 'model/PostFleetsFleetIdWingsWingIdSquadsCreated', 'model/PostFleetsFleetIdWingsWingIdSquadsNotFound', 'model/PutFleetsFleetIdMembersMemberIdMovement', 'model/PutFleetsFleetIdMembersMemberIdNotFound', 'model/PutFleetsFleetIdMembersMemberIdUnprocessableEntity', 'model/PutFleetsFleetIdNewSettings', 'model/PutFleetsFleetIdNotFound', 'model/PutFleetsFleetIdSquadsSquadIdNaming', 'model/PutFleetsFleetIdSquadsSquadIdNotFound', 'model/PutFleetsFleetIdWingsWingIdNaming', 'model/PutFleetsFleetIdWingsWingIdNotFound', 'model/ServiceUnavailable', 'model/Unauthorized'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BadRequest'), require('../model/DeleteFleetsFleetIdMembersMemberIdNotFound'), require('../model/DeleteFleetsFleetIdSquadsSquadIdNotFound'), require('../model/DeleteFleetsFleetIdWingsWingIdNotFound'), require('../model/ErrorLimited'), require('../model/Forbidden'), require('../model/GatewayTimeout'), require('../model/GetCharactersCharacterIdFleetNotFound'), require('../model/GetCharactersCharacterIdFleetOk'), require('../model/GetFleetsFleetIdMembers200Ok'), require('../model/GetFleetsFleetIdMembersNotFound'), require('../model/GetFleetsFleetIdNotFound'), require('../model/GetFleetsFleetIdOk'), require('../model/GetFleetsFleetIdWings200Ok'), require('../model/GetFleetsFleetIdWingsNotFound'), require('../model/InternalServerError'), require('../model/PostFleetsFleetIdMembersInvitation'), require('../model/PostFleetsFleetIdMembersNotFound'), require('../model/PostFleetsFleetIdMembersUnprocessableEntity'), require('../model/PostFleetsFleetIdWingsCreated'), require('../model/PostFleetsFleetIdWingsNotFound'), require('../model/PostFleetsFleetIdWingsWingIdSquadsCreated'), require('../model/PostFleetsFleetIdWingsWingIdSquadsNotFound'), require('../model/PutFleetsFleetIdMembersMemberIdMovement'), require('../model/PutFleetsFleetIdMembersMemberIdNotFound'), require('../model/PutFleetsFleetIdMembersMemberIdUnprocessableEntity'), require('../model/PutFleetsFleetIdNewSettings'), require('../model/PutFleetsFleetIdNotFound'), require('../model/PutFleetsFleetIdSquadsSquadIdNaming'), require('../model/PutFleetsFleetIdSquadsSquadIdNotFound'), require('../model/PutFleetsFleetIdWingsWingIdNaming'), require('../model/PutFleetsFleetIdWingsWingIdNotFound'), require('../model/ServiceUnavailable'), require('../model/Unauthorized'));
  } else {
    // Browser globals (root is window)
    if (!root.EveApi) {
      root.EveApi = {};
    }
    root.EveApi.FleetsApi = factory(root.EveApi.ApiClient, root.EveApi.BadRequest, root.EveApi.DeleteFleetsFleetIdMembersMemberIdNotFound, root.EveApi.DeleteFleetsFleetIdSquadsSquadIdNotFound, root.EveApi.DeleteFleetsFleetIdWingsWingIdNotFound, root.EveApi.ErrorLimited, root.EveApi.Forbidden, root.EveApi.GatewayTimeout, root.EveApi.GetCharactersCharacterIdFleetNotFound, root.EveApi.GetCharactersCharacterIdFleetOk, root.EveApi.GetFleetsFleetIdMembers200Ok, root.EveApi.GetFleetsFleetIdMembersNotFound, root.EveApi.GetFleetsFleetIdNotFound, root.EveApi.GetFleetsFleetIdOk, root.EveApi.GetFleetsFleetIdWings200Ok, root.EveApi.GetFleetsFleetIdWingsNotFound, root.EveApi.InternalServerError, root.EveApi.PostFleetsFleetIdMembersInvitation, root.EveApi.PostFleetsFleetIdMembersNotFound, root.EveApi.PostFleetsFleetIdMembersUnprocessableEntity, root.EveApi.PostFleetsFleetIdWingsCreated, root.EveApi.PostFleetsFleetIdWingsNotFound, root.EveApi.PostFleetsFleetIdWingsWingIdSquadsCreated, root.EveApi.PostFleetsFleetIdWingsWingIdSquadsNotFound, root.EveApi.PutFleetsFleetIdMembersMemberIdMovement, root.EveApi.PutFleetsFleetIdMembersMemberIdNotFound, root.EveApi.PutFleetsFleetIdMembersMemberIdUnprocessableEntity, root.EveApi.PutFleetsFleetIdNewSettings, root.EveApi.PutFleetsFleetIdNotFound, root.EveApi.PutFleetsFleetIdSquadsSquadIdNaming, root.EveApi.PutFleetsFleetIdSquadsSquadIdNotFound, root.EveApi.PutFleetsFleetIdWingsWingIdNaming, root.EveApi.PutFleetsFleetIdWingsWingIdNotFound, root.EveApi.ServiceUnavailable, root.EveApi.Unauthorized);
  }
}(this, function(ApiClient, BadRequest, DeleteFleetsFleetIdMembersMemberIdNotFound, DeleteFleetsFleetIdSquadsSquadIdNotFound, DeleteFleetsFleetIdWingsWingIdNotFound, ErrorLimited, Forbidden, GatewayTimeout, GetCharactersCharacterIdFleetNotFound, GetCharactersCharacterIdFleetOk, GetFleetsFleetIdMembers200Ok, GetFleetsFleetIdMembersNotFound, GetFleetsFleetIdNotFound, GetFleetsFleetIdOk, GetFleetsFleetIdWings200Ok, GetFleetsFleetIdWingsNotFound, InternalServerError, PostFleetsFleetIdMembersInvitation, PostFleetsFleetIdMembersNotFound, PostFleetsFleetIdMembersUnprocessableEntity, PostFleetsFleetIdWingsCreated, PostFleetsFleetIdWingsNotFound, PostFleetsFleetIdWingsWingIdSquadsCreated, PostFleetsFleetIdWingsWingIdSquadsNotFound, PutFleetsFleetIdMembersMemberIdMovement, PutFleetsFleetIdMembersMemberIdNotFound, PutFleetsFleetIdMembersMemberIdUnprocessableEntity, PutFleetsFleetIdNewSettings, PutFleetsFleetIdNotFound, PutFleetsFleetIdSquadsSquadIdNaming, PutFleetsFleetIdSquadsSquadIdNotFound, PutFleetsFleetIdWingsWingIdNaming, PutFleetsFleetIdWingsWingIdNotFound, ServiceUnavailable, Unauthorized) {
  'use strict';

  /**
   * Fleets service.
   * @module api/FleetsApi
   * @version 1.12
   */

  /**
   * Constructs a new FleetsApi. 
   * @alias module:api/FleetsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteFleetsFleetIdMembersMemberId operation.
     * @callback module:api/FleetsApi~deleteFleetsFleetIdMembersMemberIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Kick fleet member
     * Kick a fleet member  --- Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/` 
     * @param {Number} fleet_id ID for a fleet
     * @param {Number} member_id The character ID of a member in this fleet
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use if unable to set a header
     * @param {module:api/FleetsApi~deleteFleetsFleetIdMembersMemberIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFleetsFleetIdMembersMemberId = function(fleet_id, member_id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fleet_id' is set
      if (fleet_id === undefined || fleet_id === null) {
        throw new Error("Missing the required parameter 'fleet_id' when calling deleteFleetsFleetIdMembersMemberId");
      }

      // verify the required parameter 'member_id' is set
      if (member_id === undefined || member_id === null) {
        throw new Error("Missing the required parameter 'member_id' when calling deleteFleetsFleetIdMembersMemberId");
      }


      var pathParams = {
        'fleet_id': fleet_id,
        'member_id': member_id
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/members/{member_id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFleetsFleetIdSquadsSquadId operation.
     * @callback module:api/FleetsApi~deleteFleetsFleetIdSquadsSquadIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete fleet squad
     * Delete a fleet squad, only empty squads can be deleted  --- Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/` 
     * @param {Number} fleet_id ID for a fleet
     * @param {Number} squad_id The squad to delete
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use if unable to set a header
     * @param {module:api/FleetsApi~deleteFleetsFleetIdSquadsSquadIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFleetsFleetIdSquadsSquadId = function(fleet_id, squad_id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fleet_id' is set
      if (fleet_id === undefined || fleet_id === null) {
        throw new Error("Missing the required parameter 'fleet_id' when calling deleteFleetsFleetIdSquadsSquadId");
      }

      // verify the required parameter 'squad_id' is set
      if (squad_id === undefined || squad_id === null) {
        throw new Error("Missing the required parameter 'squad_id' when calling deleteFleetsFleetIdSquadsSquadId");
      }


      var pathParams = {
        'fleet_id': fleet_id,
        'squad_id': squad_id
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/squads/{squad_id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFleetsFleetIdWingsWingId operation.
     * @callback module:api/FleetsApi~deleteFleetsFleetIdWingsWingIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete fleet wing
     * Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/` 
     * @param {Number} fleet_id ID for a fleet
     * @param {Number} wing_id The wing to delete
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use if unable to set a header
     * @param {module:api/FleetsApi~deleteFleetsFleetIdWingsWingIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFleetsFleetIdWingsWingId = function(fleet_id, wing_id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fleet_id' is set
      if (fleet_id === undefined || fleet_id === null) {
        throw new Error("Missing the required parameter 'fleet_id' when calling deleteFleetsFleetIdWingsWingId");
      }

      // verify the required parameter 'wing_id' is set
      if (wing_id === undefined || wing_id === null) {
        throw new Error("Missing the required parameter 'wing_id' when calling deleteFleetsFleetIdWingsWingId");
      }


      var pathParams = {
        'fleet_id': fleet_id,
        'wing_id': wing_id
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/wings/{wing_id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdFleet operation.
     * @callback module:api/FleetsApi~getCharactersCharacterIdFleetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCharactersCharacterIdFleetOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get character fleet info
     * Return the fleet ID the character is in, if any.  --- Alternate route: `/legacy/characters/{character_id}/fleet/`  Alternate route: `/v1/characters/{character_id}/fleet/`  --- This route is cached for up to 60 seconds  --- Warning: This route has an upgrade available  --- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/characters/{character_id}/fleet/)
     * @param {Number} character_id An EVE character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.If_None_Match ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} opts.token Access token to use if unable to set a header
     * @param {module:api/FleetsApi~getCharactersCharacterIdFleetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCharactersCharacterIdFleetOk}
     */
    this.getCharactersCharacterIdFleet = function(character_id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'character_id' is set
      if (character_id === undefined || character_id === null) {
        throw new Error("Missing the required parameter 'character_id' when calling getCharactersCharacterIdFleet");
      }


      var pathParams = {
        'character_id': character_id
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-None-Match': opts['If_None_Match']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetCharactersCharacterIdFleetOk;

      return this.apiClient.callApi(
        '/characters/{character_id}/fleet/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFleetsFleetId operation.
     * @callback module:api/FleetsApi~getFleetsFleetIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFleetsFleetIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get fleet information
     * Return details about a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/v1/fleets/{fleet_id}/`  --- This route is cached for up to 5 seconds
     * @param {Number} fleet_id ID for a fleet
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.If_None_Match ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {String} opts.token Access token to use if unable to set a header
     * @param {module:api/FleetsApi~getFleetsFleetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFleetsFleetIdOk}
     */
    this.getFleetsFleetId = function(fleet_id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fleet_id' is set
      if (fleet_id === undefined || fleet_id === null) {
        throw new Error("Missing the required parameter 'fleet_id' when calling getFleetsFleetId");
      }


      var pathParams = {
        'fleet_id': fleet_id
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'If-None-Match': opts['If_None_Match']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetFleetsFleetIdOk;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFleetsFleetIdMembers operation.
     * @callback module:api/FleetsApi~getFleetsFleetIdMembersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetFleetsFleetIdMembers200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get fleet members
     * Return information about fleet members  --- Alternate route: `/dev/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/v1/fleets/{fleet_id}/members/`  --- This route is cached for up to 5 seconds
     * @param {Number} fleet_id ID for a fleet
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.Accept_Language Language to use in the response (default to en)
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.If_None_Match ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:model/String} opts.language Language to use in the response, takes precedence over Accept-Language (default to en)
     * @param {String} opts.token Access token to use if unable to set a header
     * @param {module:api/FleetsApi~getFleetsFleetIdMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetFleetsFleetIdMembers200Ok>}
     */
    this.getFleetsFleetIdMembers = function(fleet_id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fleet_id' is set
      if (fleet_id === undefined || fleet_id === null) {
        throw new Error("Missing the required parameter 'fleet_id' when calling getFleetsFleetIdMembers");
      }


      var pathParams = {
        'fleet_id': fleet_id
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language'],
        'token': opts['token'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['Accept_Language'],
        'If-None-Match': opts['If_None_Match']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [GetFleetsFleetIdMembers200Ok];

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/members/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFleetsFleetIdWings operation.
     * @callback module:api/FleetsApi~getFleetsFleetIdWingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetFleetsFleetIdWings200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get fleet wings
     * Return information about wings in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/v1/fleets/{fleet_id}/wings/`  --- This route is cached for up to 5 seconds
     * @param {Number} fleet_id ID for a fleet
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.Accept_Language Language to use in the response (default to en)
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.If_None_Match ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {module:model/String} opts.language Language to use in the response, takes precedence over Accept-Language (default to en)
     * @param {String} opts.token Access token to use if unable to set a header
     * @param {module:api/FleetsApi~getFleetsFleetIdWingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetFleetsFleetIdWings200Ok>}
     */
    this.getFleetsFleetIdWings = function(fleet_id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fleet_id' is set
      if (fleet_id === undefined || fleet_id === null) {
        throw new Error("Missing the required parameter 'fleet_id' when calling getFleetsFleetIdWings");
      }


      var pathParams = {
        'fleet_id': fleet_id
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language'],
        'token': opts['token'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['Accept_Language'],
        'If-None-Match': opts['If_None_Match']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [GetFleetsFleetIdWings200Ok];

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/wings/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postFleetsFleetIdMembers operation.
     * @callback module:api/FleetsApi~postFleetsFleetIdMembersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create fleet invitation
     * Invite a character into the fleet. If a character has a CSPA charge set it is not possible to invite them to the fleet using ESI  --- Alternate route: `/dev/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/v1/fleets/{fleet_id}/members/` 
     * @param {Number} fleet_id ID for a fleet
     * @param {module:model/PostFleetsFleetIdMembersInvitation} invitation Details of the invitation
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use if unable to set a header
     * @param {module:api/FleetsApi~postFleetsFleetIdMembersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postFleetsFleetIdMembers = function(fleet_id, invitation, opts, callback) {
      opts = opts || {};
      var postBody = invitation;

      // verify the required parameter 'fleet_id' is set
      if (fleet_id === undefined || fleet_id === null) {
        throw new Error("Missing the required parameter 'fleet_id' when calling postFleetsFleetIdMembers");
      }

      // verify the required parameter 'invitation' is set
      if (invitation === undefined || invitation === null) {
        throw new Error("Missing the required parameter 'invitation' when calling postFleetsFleetIdMembers");
      }


      var pathParams = {
        'fleet_id': fleet_id
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/members/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postFleetsFleetIdWings operation.
     * @callback module:api/FleetsApi~postFleetsFleetIdWingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostFleetsFleetIdWingsCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create fleet wing
     * Create a new wing in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/v1/fleets/{fleet_id}/wings/` 
     * @param {Number} fleet_id ID for a fleet
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use if unable to set a header
     * @param {module:api/FleetsApi~postFleetsFleetIdWingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostFleetsFleetIdWingsCreated}
     */
    this.postFleetsFleetIdWings = function(fleet_id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fleet_id' is set
      if (fleet_id === undefined || fleet_id === null) {
        throw new Error("Missing the required parameter 'fleet_id' when calling postFleetsFleetIdWings");
      }


      var pathParams = {
        'fleet_id': fleet_id
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PostFleetsFleetIdWingsCreated;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/wings/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postFleetsFleetIdWingsWingIdSquads operation.
     * @callback module:api/FleetsApi~postFleetsFleetIdWingsWingIdSquadsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostFleetsFleetIdWingsWingIdSquadsCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create fleet squad
     * Create a new squad in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/squads/` 
     * @param {Number} fleet_id ID for a fleet
     * @param {Number} wing_id The wing_id to create squad in
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use if unable to set a header
     * @param {module:api/FleetsApi~postFleetsFleetIdWingsWingIdSquadsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostFleetsFleetIdWingsWingIdSquadsCreated}
     */
    this.postFleetsFleetIdWingsWingIdSquads = function(fleet_id, wing_id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fleet_id' is set
      if (fleet_id === undefined || fleet_id === null) {
        throw new Error("Missing the required parameter 'fleet_id' when calling postFleetsFleetIdWingsWingIdSquads");
      }

      // verify the required parameter 'wing_id' is set
      if (wing_id === undefined || wing_id === null) {
        throw new Error("Missing the required parameter 'wing_id' when calling postFleetsFleetIdWingsWingIdSquads");
      }


      var pathParams = {
        'fleet_id': fleet_id,
        'wing_id': wing_id
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PostFleetsFleetIdWingsWingIdSquadsCreated;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/wings/{wing_id}/squads/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putFleetsFleetId operation.
     * @callback module:api/FleetsApi~putFleetsFleetIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update fleet
     * Update settings about a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/v1/fleets/{fleet_id}/` 
     * @param {Number} fleet_id ID for a fleet
     * @param {module:model/PutFleetsFleetIdNewSettings} new_settings What to update for this fleet
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use if unable to set a header
     * @param {module:api/FleetsApi~putFleetsFleetIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putFleetsFleetId = function(fleet_id, new_settings, opts, callback) {
      opts = opts || {};
      var postBody = new_settings;

      // verify the required parameter 'fleet_id' is set
      if (fleet_id === undefined || fleet_id === null) {
        throw new Error("Missing the required parameter 'fleet_id' when calling putFleetsFleetId");
      }

      // verify the required parameter 'new_settings' is set
      if (new_settings === undefined || new_settings === null) {
        throw new Error("Missing the required parameter 'new_settings' when calling putFleetsFleetId");
      }


      var pathParams = {
        'fleet_id': fleet_id
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putFleetsFleetIdMembersMemberId operation.
     * @callback module:api/FleetsApi~putFleetsFleetIdMembersMemberIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move fleet member
     * Move a fleet member around  --- Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/` 
     * @param {Number} fleet_id ID for a fleet
     * @param {Number} member_id The character ID of a member in this fleet
     * @param {module:model/PutFleetsFleetIdMembersMemberIdMovement} movement Details of the invitation
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use if unable to set a header
     * @param {module:api/FleetsApi~putFleetsFleetIdMembersMemberIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putFleetsFleetIdMembersMemberId = function(fleet_id, member_id, movement, opts, callback) {
      opts = opts || {};
      var postBody = movement;

      // verify the required parameter 'fleet_id' is set
      if (fleet_id === undefined || fleet_id === null) {
        throw new Error("Missing the required parameter 'fleet_id' when calling putFleetsFleetIdMembersMemberId");
      }

      // verify the required parameter 'member_id' is set
      if (member_id === undefined || member_id === null) {
        throw new Error("Missing the required parameter 'member_id' when calling putFleetsFleetIdMembersMemberId");
      }

      // verify the required parameter 'movement' is set
      if (movement === undefined || movement === null) {
        throw new Error("Missing the required parameter 'movement' when calling putFleetsFleetIdMembersMemberId");
      }


      var pathParams = {
        'fleet_id': fleet_id,
        'member_id': member_id
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/members/{member_id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putFleetsFleetIdSquadsSquadId operation.
     * @callback module:api/FleetsApi~putFleetsFleetIdSquadsSquadIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename fleet squad
     * Rename a fleet squad  --- Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/` 
     * @param {Number} fleet_id ID for a fleet
     * @param {module:model/PutFleetsFleetIdSquadsSquadIdNaming} naming New name of the squad
     * @param {Number} squad_id The squad to rename
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use if unable to set a header
     * @param {module:api/FleetsApi~putFleetsFleetIdSquadsSquadIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putFleetsFleetIdSquadsSquadId = function(fleet_id, naming, squad_id, opts, callback) {
      opts = opts || {};
      var postBody = naming;

      // verify the required parameter 'fleet_id' is set
      if (fleet_id === undefined || fleet_id === null) {
        throw new Error("Missing the required parameter 'fleet_id' when calling putFleetsFleetIdSquadsSquadId");
      }

      // verify the required parameter 'naming' is set
      if (naming === undefined || naming === null) {
        throw new Error("Missing the required parameter 'naming' when calling putFleetsFleetIdSquadsSquadId");
      }

      // verify the required parameter 'squad_id' is set
      if (squad_id === undefined || squad_id === null) {
        throw new Error("Missing the required parameter 'squad_id' when calling putFleetsFleetIdSquadsSquadId");
      }


      var pathParams = {
        'fleet_id': fleet_id,
        'squad_id': squad_id
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/squads/{squad_id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putFleetsFleetIdWingsWingId operation.
     * @callback module:api/FleetsApi~putFleetsFleetIdWingsWingIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename fleet wing
     * Rename a fleet wing  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/` 
     * @param {Number} fleet_id ID for a fleet
     * @param {module:model/PutFleetsFleetIdWingsWingIdNaming} naming New name of the wing
     * @param {Number} wing_id The wing to rename
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use if unable to set a header
     * @param {module:api/FleetsApi~putFleetsFleetIdWingsWingIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putFleetsFleetIdWingsWingId = function(fleet_id, naming, wing_id, opts, callback) {
      opts = opts || {};
      var postBody = naming;

      // verify the required parameter 'fleet_id' is set
      if (fleet_id === undefined || fleet_id === null) {
        throw new Error("Missing the required parameter 'fleet_id' when calling putFleetsFleetIdWingsWingId");
      }

      // verify the required parameter 'naming' is set
      if (naming === undefined || naming === null) {
        throw new Error("Missing the required parameter 'naming' when calling putFleetsFleetIdWingsWingId");
      }

      // verify the required parameter 'wing_id' is set
      if (wing_id === undefined || wing_id === null) {
        throw new Error("Missing the required parameter 'wing_id' when calling putFleetsFleetIdWingsWingId");
      }


      var pathParams = {
        'fleet_id': fleet_id,
        'wing_id': wing_id
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/wings/{wing_id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
