/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.EveApi) {
      root.EveApi = {};
    }
    root.EveApi.GetContractsPublicRegionId200Ok = factory(root.EveApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The GetContractsPublicRegionId200Ok model module.
   * @module model/GetContractsPublicRegionId200Ok
   * @version 1.12
   */

  /**
   * Constructs a new <code>GetContractsPublicRegionId200Ok</code>.
   * 200 ok object
   * @alias module:model/GetContractsPublicRegionId200Ok
   * @class
   * @param contract_id {Number} contract_id integer
   * @param date_expired {Date} Expiration date of the contract
   * @param date_issued {Date} Сreation date of the contract
   * @param issuer_corporation_id {Number} Character's corporation ID for the issuer
   * @param issuer_id {Number} Character ID for the issuer
   * @param type {module:model/GetContractsPublicRegionId200Ok.TypeEnum} Type of the contract
   */
  var exports = function(contract_id, date_expired, date_issued, issuer_corporation_id, issuer_id, type) {
    this.contract_id = contract_id;
    this.date_expired = date_expired;
    this.date_issued = date_issued;
    this.issuer_corporation_id = issuer_corporation_id;
    this.issuer_id = issuer_id;
    this.type = type;
  };

  /**
   * Constructs a <code>GetContractsPublicRegionId200Ok</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GetContractsPublicRegionId200Ok} obj Optional instance to populate.
   * @return {module:model/GetContractsPublicRegionId200Ok} The populated <code>GetContractsPublicRegionId200Ok</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('buyout'))
        obj.buyout = ApiClient.convertToType(data['buyout'], 'Number');
      if (data.hasOwnProperty('collateral'))
        obj.collateral = ApiClient.convertToType(data['collateral'], 'Number');
      if (data.hasOwnProperty('contract_id'))
        obj.contract_id = ApiClient.convertToType(data['contract_id'], 'Number');
      if (data.hasOwnProperty('date_expired'))
        obj.date_expired = ApiClient.convertToType(data['date_expired'], 'Date');
      if (data.hasOwnProperty('date_issued'))
        obj.date_issued = ApiClient.convertToType(data['date_issued'], 'Date');
      if (data.hasOwnProperty('days_to_complete'))
        obj.days_to_complete = ApiClient.convertToType(data['days_to_complete'], 'Number');
      if (data.hasOwnProperty('end_location_id'))
        obj.end_location_id = ApiClient.convertToType(data['end_location_id'], 'Number');
      if (data.hasOwnProperty('for_corporation'))
        obj.for_corporation = ApiClient.convertToType(data['for_corporation'], 'Boolean');
      if (data.hasOwnProperty('issuer_corporation_id'))
        obj.issuer_corporation_id = ApiClient.convertToType(data['issuer_corporation_id'], 'Number');
      if (data.hasOwnProperty('issuer_id'))
        obj.issuer_id = ApiClient.convertToType(data['issuer_id'], 'Number');
      if (data.hasOwnProperty('price'))
        obj.price = ApiClient.convertToType(data['price'], 'Number');
      if (data.hasOwnProperty('reward'))
        obj.reward = ApiClient.convertToType(data['reward'], 'Number');
      if (data.hasOwnProperty('start_location_id'))
        obj.start_location_id = ApiClient.convertToType(data['start_location_id'], 'Number');
      if (data.hasOwnProperty('title'))
        obj.title = ApiClient.convertToType(data['title'], 'String');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('volume'))
        obj.volume = ApiClient.convertToType(data['volume'], 'Number');
    }
    return obj;
  }

  /**
   * Buyout price (for Auctions only)
   * @member {Number} buyout
   */
  exports.prototype.buyout = undefined;

  /**
   * Collateral price (for Couriers only)
   * @member {Number} collateral
   */
  exports.prototype.collateral = undefined;

  /**
   * contract_id integer
   * @member {Number} contract_id
   */
  exports.prototype.contract_id = undefined;

  /**
   * Expiration date of the contract
   * @member {Date} date_expired
   */
  exports.prototype.date_expired = undefined;

  /**
   * Сreation date of the contract
   * @member {Date} date_issued
   */
  exports.prototype.date_issued = undefined;

  /**
   * Number of days to perform the contract
   * @member {Number} days_to_complete
   */
  exports.prototype.days_to_complete = undefined;

  /**
   * End location ID (for Couriers contract)
   * @member {Number} end_location_id
   */
  exports.prototype.end_location_id = undefined;

  /**
   * true if the contract was issued on behalf of the issuer's corporation
   * @member {Boolean} for_corporation
   */
  exports.prototype.for_corporation = undefined;

  /**
   * Character's corporation ID for the issuer
   * @member {Number} issuer_corporation_id
   */
  exports.prototype.issuer_corporation_id = undefined;

  /**
   * Character ID for the issuer
   * @member {Number} issuer_id
   */
  exports.prototype.issuer_id = undefined;

  /**
   * Price of contract (for ItemsExchange and Auctions)
   * @member {Number} price
   */
  exports.prototype.price = undefined;

  /**
   * Remuneration for contract (for Couriers only)
   * @member {Number} reward
   */
  exports.prototype.reward = undefined;

  /**
   * Start location ID (for Couriers contract)
   * @member {Number} start_location_id
   */
  exports.prototype.start_location_id = undefined;

  /**
   * Title of the contract
   * @member {String} title
   */
  exports.prototype.title = undefined;

  /**
   * Type of the contract
   * @member {module:model/GetContractsPublicRegionId200Ok.TypeEnum} type
   */
  exports.prototype.type = undefined;

  /**
   * Volume of items in the contract
   * @member {Number} volume
   */
  exports.prototype.volume = undefined;



  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "unknown"
     * @const
     */
    unknown: "unknown",

    /**
     * value: "item_exchange"
     * @const
     */
    item_exchange: "item_exchange",

    /**
     * value: "auction"
     * @const
     */
    auction: "auction",

    /**
     * value: "courier"
     * @const
     */
    courier: "courier",

    /**
     * value: "loan"
     * @const
     */
    loan: "loan"
  };

  return exports;

}));
