/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.EveApi) {
      root.EveApi = {};
    }
    root.EveApi.GetCharactersCharacterIdWalletTransactions200Ok = factory(root.EveApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The GetCharactersCharacterIdWalletTransactions200Ok model module.
   * @module model/GetCharactersCharacterIdWalletTransactions200Ok
   * @version 1.12
   */

  /**
   * Constructs a new <code>GetCharactersCharacterIdWalletTransactions200Ok</code>.
   * wallet transaction
   * @alias module:model/GetCharactersCharacterIdWalletTransactions200Ok
   * @class
   * @param client_id {Number} client_id integer
   * @param _date {Date} Date and time of transaction
   * @param is_buy {Boolean} is_buy boolean
   * @param is_personal {Boolean} is_personal boolean
   * @param journal_ref_id {Number} journal_ref_id integer
   * @param location_id {Number} location_id integer
   * @param quantity {Number} quantity integer
   * @param transaction_id {Number} Unique transaction ID
   * @param type_id {Number} type_id integer
   * @param unit_price {Number} Amount paid per unit
   */
  var exports = function(client_id, _date, is_buy, is_personal, journal_ref_id, location_id, quantity, transaction_id, type_id, unit_price) {
    this.client_id = client_id;
    this._date = _date;
    this.is_buy = is_buy;
    this.is_personal = is_personal;
    this.journal_ref_id = journal_ref_id;
    this.location_id = location_id;
    this.quantity = quantity;
    this.transaction_id = transaction_id;
    this.type_id = type_id;
    this.unit_price = unit_price;
  };

  /**
   * Constructs a <code>GetCharactersCharacterIdWalletTransactions200Ok</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GetCharactersCharacterIdWalletTransactions200Ok} obj Optional instance to populate.
   * @return {module:model/GetCharactersCharacterIdWalletTransactions200Ok} The populated <code>GetCharactersCharacterIdWalletTransactions200Ok</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('client_id'))
        obj.client_id = ApiClient.convertToType(data['client_id'], 'Number');
      if (data.hasOwnProperty('date'))
        obj._date = ApiClient.convertToType(data['date'], 'Date');
      if (data.hasOwnProperty('is_buy'))
        obj.is_buy = ApiClient.convertToType(data['is_buy'], 'Boolean');
      if (data.hasOwnProperty('is_personal'))
        obj.is_personal = ApiClient.convertToType(data['is_personal'], 'Boolean');
      if (data.hasOwnProperty('journal_ref_id'))
        obj.journal_ref_id = ApiClient.convertToType(data['journal_ref_id'], 'Number');
      if (data.hasOwnProperty('location_id'))
        obj.location_id = ApiClient.convertToType(data['location_id'], 'Number');
      if (data.hasOwnProperty('quantity'))
        obj.quantity = ApiClient.convertToType(data['quantity'], 'Number');
      if (data.hasOwnProperty('transaction_id'))
        obj.transaction_id = ApiClient.convertToType(data['transaction_id'], 'Number');
      if (data.hasOwnProperty('type_id'))
        obj.type_id = ApiClient.convertToType(data['type_id'], 'Number');
      if (data.hasOwnProperty('unit_price'))
        obj.unit_price = ApiClient.convertToType(data['unit_price'], 'Number');
    }
    return obj;
  }

  /**
   * client_id integer
   * @member {Number} client_id
   */
  exports.prototype.client_id = undefined;

  /**
   * Date and time of transaction
   * @member {Date} _date
   */
  exports.prototype._date = undefined;

  /**
   * is_buy boolean
   * @member {Boolean} is_buy
   */
  exports.prototype.is_buy = undefined;

  /**
   * is_personal boolean
   * @member {Boolean} is_personal
   */
  exports.prototype.is_personal = undefined;

  /**
   * journal_ref_id integer
   * @member {Number} journal_ref_id
   */
  exports.prototype.journal_ref_id = undefined;

  /**
   * location_id integer
   * @member {Number} location_id
   */
  exports.prototype.location_id = undefined;

  /**
   * quantity integer
   * @member {Number} quantity
   */
  exports.prototype.quantity = undefined;

  /**
   * Unique transaction ID
   * @member {Number} transaction_id
   */
  exports.prototype.transaction_id = undefined;

  /**
   * type_id integer
   * @member {Number} type_id
   */
  exports.prototype.type_id = undefined;

  /**
   * Amount paid per unit
   * @member {Number} unit_price
   */
  exports.prototype.unit_price = undefined;


  return exports;

}));
