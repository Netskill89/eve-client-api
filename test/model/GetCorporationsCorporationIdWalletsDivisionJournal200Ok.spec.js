/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveApi);
  }
}(this, function(expect, EveApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetCorporationsCorporationIdWalletsDivisionJournal200Ok', function() {
      beforeEach(function() {
        instance = new EveApi.GetCorporationsCorporationIdWalletsDivisionJournal200Ok();
      });

      it('should create an instance of GetCorporationsCorporationIdWalletsDivisionJournal200Ok', function() {
        // TODO: update the code to test GetCorporationsCorporationIdWalletsDivisionJournal200Ok
        expect(instance).to.be.a(EveApi.GetCorporationsCorporationIdWalletsDivisionJournal200Ok);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property balance (base name: "balance")', function() {
        // TODO: update the code to test the property balance
        expect(instance).to.have.property('balance');
        // expect(instance.balance).to.be(expectedValueLiteral);
      });

      it('should have the property context_id (base name: "context_id")', function() {
        // TODO: update the code to test the property context_id
        expect(instance).to.have.property('context_id');
        // expect(instance.context_id).to.be(expectedValueLiteral);
      });

      it('should have the property context_id_type (base name: "context_id_type")', function() {
        // TODO: update the code to test the property context_id_type
        expect(instance).to.have.property('context_id_type');
        // expect(instance.context_id_type).to.be(expectedValueLiteral);
      });

      it('should have the property _date (base name: "date")', function() {
        // TODO: update the code to test the property _date
        expect(instance).to.have.property('_date');
        // expect(instance._date).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property first_party_id (base name: "first_party_id")', function() {
        // TODO: update the code to test the property first_party_id
        expect(instance).to.have.property('first_party_id');
        // expect(instance.first_party_id).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property reason (base name: "reason")', function() {
        // TODO: update the code to test the property reason
        expect(instance).to.have.property('reason');
        // expect(instance.reason).to.be(expectedValueLiteral);
      });

      it('should have the property ref_type (base name: "ref_type")', function() {
        // TODO: update the code to test the property ref_type
        expect(instance).to.have.property('ref_type');
        // expect(instance.ref_type).to.be(expectedValueLiteral);
      });

      it('should have the property second_party_id (base name: "second_party_id")', function() {
        // TODO: update the code to test the property second_party_id
        expect(instance).to.have.property('second_party_id');
        // expect(instance.second_party_id).to.be(expectedValueLiteral);
      });

      it('should have the property tax (base name: "tax")', function() {
        // TODO: update the code to test the property tax
        expect(instance).to.have.property('tax');
        // expect(instance.tax).to.be(expectedValueLiteral);
      });

      it('should have the property tax_receiver_id (base name: "tax_receiver_id")', function() {
        // TODO: update the code to test the property tax_receiver_id
        expect(instance).to.have.property('tax_receiver_id');
        // expect(instance.tax_receiver_id).to.be(expectedValueLiteral);
      });

    });
  });

}));
