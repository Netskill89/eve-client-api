/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveApi);
  }
}(this, function(expect, EveApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetCharactersCharacterIdNotifications200Ok', function() {
      beforeEach(function() {
        instance = new EveApi.GetCharactersCharacterIdNotifications200Ok();
      });

      it('should create an instance of GetCharactersCharacterIdNotifications200Ok', function() {
        // TODO: update the code to test GetCharactersCharacterIdNotifications200Ok
        expect(instance).to.be.a(EveApi.GetCharactersCharacterIdNotifications200Ok);
      });

      it('should have the property is_read (base name: "is_read")', function() {
        // TODO: update the code to test the property is_read
        expect(instance).to.have.property('is_read');
        // expect(instance.is_read).to.be(expectedValueLiteral);
      });

      it('should have the property notification_id (base name: "notification_id")', function() {
        // TODO: update the code to test the property notification_id
        expect(instance).to.have.property('notification_id');
        // expect(instance.notification_id).to.be(expectedValueLiteral);
      });

      it('should have the property sender_id (base name: "sender_id")', function() {
        // TODO: update the code to test the property sender_id
        expect(instance).to.have.property('sender_id');
        // expect(instance.sender_id).to.be(expectedValueLiteral);
      });

      it('should have the property sender_type (base name: "sender_type")', function() {
        // TODO: update the code to test the property sender_type
        expect(instance).to.have.property('sender_type');
        // expect(instance.sender_type).to.be(expectedValueLiteral);
      });

      it('should have the property text (base name: "text")', function() {
        // TODO: update the code to test the property text
        expect(instance).to.have.property('text');
        // expect(instance.text).to.be(expectedValueLiteral);
      });

      it('should have the property timestamp (base name: "timestamp")', function() {
        // TODO: update the code to test the property timestamp
        expect(instance).to.have.property('timestamp');
        // expect(instance.timestamp).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

    });
  });

}));
