/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveApi);
  }
}(this, function(expect, EveApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetCharactersCharacterIdContracts200Ok', function() {
      beforeEach(function() {
        instance = new EveApi.GetCharactersCharacterIdContracts200Ok();
      });

      it('should create an instance of GetCharactersCharacterIdContracts200Ok', function() {
        // TODO: update the code to test GetCharactersCharacterIdContracts200Ok
        expect(instance).to.be.a(EveApi.GetCharactersCharacterIdContracts200Ok);
      });

      it('should have the property acceptor_id (base name: "acceptor_id")', function() {
        // TODO: update the code to test the property acceptor_id
        expect(instance).to.have.property('acceptor_id');
        // expect(instance.acceptor_id).to.be(expectedValueLiteral);
      });

      it('should have the property assignee_id (base name: "assignee_id")', function() {
        // TODO: update the code to test the property assignee_id
        expect(instance).to.have.property('assignee_id');
        // expect(instance.assignee_id).to.be(expectedValueLiteral);
      });

      it('should have the property availability (base name: "availability")', function() {
        // TODO: update the code to test the property availability
        expect(instance).to.have.property('availability');
        // expect(instance.availability).to.be(expectedValueLiteral);
      });

      it('should have the property buyout (base name: "buyout")', function() {
        // TODO: update the code to test the property buyout
        expect(instance).to.have.property('buyout');
        // expect(instance.buyout).to.be(expectedValueLiteral);
      });

      it('should have the property collateral (base name: "collateral")', function() {
        // TODO: update the code to test the property collateral
        expect(instance).to.have.property('collateral');
        // expect(instance.collateral).to.be(expectedValueLiteral);
      });

      it('should have the property contract_id (base name: "contract_id")', function() {
        // TODO: update the code to test the property contract_id
        expect(instance).to.have.property('contract_id');
        // expect(instance.contract_id).to.be(expectedValueLiteral);
      });

      it('should have the property date_accepted (base name: "date_accepted")', function() {
        // TODO: update the code to test the property date_accepted
        expect(instance).to.have.property('date_accepted');
        // expect(instance.date_accepted).to.be(expectedValueLiteral);
      });

      it('should have the property date_completed (base name: "date_completed")', function() {
        // TODO: update the code to test the property date_completed
        expect(instance).to.have.property('date_completed');
        // expect(instance.date_completed).to.be(expectedValueLiteral);
      });

      it('should have the property date_expired (base name: "date_expired")', function() {
        // TODO: update the code to test the property date_expired
        expect(instance).to.have.property('date_expired');
        // expect(instance.date_expired).to.be(expectedValueLiteral);
      });

      it('should have the property date_issued (base name: "date_issued")', function() {
        // TODO: update the code to test the property date_issued
        expect(instance).to.have.property('date_issued');
        // expect(instance.date_issued).to.be(expectedValueLiteral);
      });

      it('should have the property days_to_complete (base name: "days_to_complete")', function() {
        // TODO: update the code to test the property days_to_complete
        expect(instance).to.have.property('days_to_complete');
        // expect(instance.days_to_complete).to.be(expectedValueLiteral);
      });

      it('should have the property end_location_id (base name: "end_location_id")', function() {
        // TODO: update the code to test the property end_location_id
        expect(instance).to.have.property('end_location_id');
        // expect(instance.end_location_id).to.be(expectedValueLiteral);
      });

      it('should have the property for_corporation (base name: "for_corporation")', function() {
        // TODO: update the code to test the property for_corporation
        expect(instance).to.have.property('for_corporation');
        // expect(instance.for_corporation).to.be(expectedValueLiteral);
      });

      it('should have the property issuer_corporation_id (base name: "issuer_corporation_id")', function() {
        // TODO: update the code to test the property issuer_corporation_id
        expect(instance).to.have.property('issuer_corporation_id');
        // expect(instance.issuer_corporation_id).to.be(expectedValueLiteral);
      });

      it('should have the property issuer_id (base name: "issuer_id")', function() {
        // TODO: update the code to test the property issuer_id
        expect(instance).to.have.property('issuer_id');
        // expect(instance.issuer_id).to.be(expectedValueLiteral);
      });

      it('should have the property price (base name: "price")', function() {
        // TODO: update the code to test the property price
        expect(instance).to.have.property('price');
        // expect(instance.price).to.be(expectedValueLiteral);
      });

      it('should have the property reward (base name: "reward")', function() {
        // TODO: update the code to test the property reward
        expect(instance).to.have.property('reward');
        // expect(instance.reward).to.be(expectedValueLiteral);
      });

      it('should have the property start_location_id (base name: "start_location_id")', function() {
        // TODO: update the code to test the property start_location_id
        expect(instance).to.have.property('start_location_id');
        // expect(instance.start_location_id).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property volume (base name: "volume")', function() {
        // TODO: update the code to test the property volume
        expect(instance).to.have.property('volume');
        // expect(instance.volume).to.be(expectedValueLiteral);
      });

    });
  });

}));
