/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveApi);
  }
}(this, function(expect, EveApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetUniverseTypesTypeIdOk', function() {
      beforeEach(function() {
        instance = new EveApi.GetUniverseTypesTypeIdOk();
      });

      it('should create an instance of GetUniverseTypesTypeIdOk', function() {
        // TODO: update the code to test GetUniverseTypesTypeIdOk
        expect(instance).to.be.a(EveApi.GetUniverseTypesTypeIdOk);
      });

      it('should have the property capacity (base name: "capacity")', function() {
        // TODO: update the code to test the property capacity
        expect(instance).to.have.property('capacity');
        // expect(instance.capacity).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property dogma_attributes (base name: "dogma_attributes")', function() {
        // TODO: update the code to test the property dogma_attributes
        expect(instance).to.have.property('dogma_attributes');
        // expect(instance.dogma_attributes).to.be(expectedValueLiteral);
      });

      it('should have the property dogma_effects (base name: "dogma_effects")', function() {
        // TODO: update the code to test the property dogma_effects
        expect(instance).to.have.property('dogma_effects');
        // expect(instance.dogma_effects).to.be(expectedValueLiteral);
      });

      it('should have the property graphic_id (base name: "graphic_id")', function() {
        // TODO: update the code to test the property graphic_id
        expect(instance).to.have.property('graphic_id');
        // expect(instance.graphic_id).to.be(expectedValueLiteral);
      });

      it('should have the property group_id (base name: "group_id")', function() {
        // TODO: update the code to test the property group_id
        expect(instance).to.have.property('group_id');
        // expect(instance.group_id).to.be(expectedValueLiteral);
      });

      it('should have the property icon_id (base name: "icon_id")', function() {
        // TODO: update the code to test the property icon_id
        expect(instance).to.have.property('icon_id');
        // expect(instance.icon_id).to.be(expectedValueLiteral);
      });

      it('should have the property market_group_id (base name: "market_group_id")', function() {
        // TODO: update the code to test the property market_group_id
        expect(instance).to.have.property('market_group_id');
        // expect(instance.market_group_id).to.be(expectedValueLiteral);
      });

      it('should have the property mass (base name: "mass")', function() {
        // TODO: update the code to test the property mass
        expect(instance).to.have.property('mass');
        // expect(instance.mass).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property packaged_volume (base name: "packaged_volume")', function() {
        // TODO: update the code to test the property packaged_volume
        expect(instance).to.have.property('packaged_volume');
        // expect(instance.packaged_volume).to.be(expectedValueLiteral);
      });

      it('should have the property portion_size (base name: "portion_size")', function() {
        // TODO: update the code to test the property portion_size
        expect(instance).to.have.property('portion_size');
        // expect(instance.portion_size).to.be(expectedValueLiteral);
      });

      it('should have the property published (base name: "published")', function() {
        // TODO: update the code to test the property published
        expect(instance).to.have.property('published');
        // expect(instance.published).to.be(expectedValueLiteral);
      });

      it('should have the property radius (base name: "radius")', function() {
        // TODO: update the code to test the property radius
        expect(instance).to.have.property('radius');
        // expect(instance.radius).to.be(expectedValueLiteral);
      });

      it('should have the property type_id (base name: "type_id")', function() {
        // TODO: update the code to test the property type_id
        expect(instance).to.have.property('type_id');
        // expect(instance.type_id).to.be(expectedValueLiteral);
      });

      it('should have the property volume (base name: "volume")', function() {
        // TODO: update the code to test the property volume
        expect(instance).to.have.property('volume');
        // expect(instance.volume).to.be(expectedValueLiteral);
      });

    });
  });

}));
