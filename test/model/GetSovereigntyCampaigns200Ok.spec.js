/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveApi);
  }
}(this, function(expect, EveApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetSovereigntyCampaigns200Ok', function() {
      beforeEach(function() {
        instance = new EveApi.GetSovereigntyCampaigns200Ok();
      });

      it('should create an instance of GetSovereigntyCampaigns200Ok', function() {
        // TODO: update the code to test GetSovereigntyCampaigns200Ok
        expect(instance).to.be.a(EveApi.GetSovereigntyCampaigns200Ok);
      });

      it('should have the property attackers_score (base name: "attackers_score")', function() {
        // TODO: update the code to test the property attackers_score
        expect(instance).to.have.property('attackers_score');
        // expect(instance.attackers_score).to.be(expectedValueLiteral);
      });

      it('should have the property campaign_id (base name: "campaign_id")', function() {
        // TODO: update the code to test the property campaign_id
        expect(instance).to.have.property('campaign_id');
        // expect(instance.campaign_id).to.be(expectedValueLiteral);
      });

      it('should have the property constellation_id (base name: "constellation_id")', function() {
        // TODO: update the code to test the property constellation_id
        expect(instance).to.have.property('constellation_id');
        // expect(instance.constellation_id).to.be(expectedValueLiteral);
      });

      it('should have the property defender_id (base name: "defender_id")', function() {
        // TODO: update the code to test the property defender_id
        expect(instance).to.have.property('defender_id');
        // expect(instance.defender_id).to.be(expectedValueLiteral);
      });

      it('should have the property defender_score (base name: "defender_score")', function() {
        // TODO: update the code to test the property defender_score
        expect(instance).to.have.property('defender_score');
        // expect(instance.defender_score).to.be(expectedValueLiteral);
      });

      it('should have the property event_type (base name: "event_type")', function() {
        // TODO: update the code to test the property event_type
        expect(instance).to.have.property('event_type');
        // expect(instance.event_type).to.be(expectedValueLiteral);
      });

      it('should have the property participants (base name: "participants")', function() {
        // TODO: update the code to test the property participants
        expect(instance).to.have.property('participants');
        // expect(instance.participants).to.be(expectedValueLiteral);
      });

      it('should have the property solar_system_id (base name: "solar_system_id")', function() {
        // TODO: update the code to test the property solar_system_id
        expect(instance).to.have.property('solar_system_id');
        // expect(instance.solar_system_id).to.be(expectedValueLiteral);
      });

      it('should have the property start_time (base name: "start_time")', function() {
        // TODO: update the code to test the property start_time
        expect(instance).to.have.property('start_time');
        // expect(instance.start_time).to.be(expectedValueLiteral);
      });

      it('should have the property structure_id (base name: "structure_id")', function() {
        // TODO: update the code to test the property structure_id
        expect(instance).to.have.property('structure_id');
        // expect(instance.structure_id).to.be(expectedValueLiteral);
      });

    });
  });

}));
