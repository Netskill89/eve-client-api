/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveApi);
  }
}(this, function(expect, EveApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetCorporationsCorporationIdIndustryJobs200Ok', function() {
      beforeEach(function() {
        instance = new EveApi.GetCorporationsCorporationIdIndustryJobs200Ok();
      });

      it('should create an instance of GetCorporationsCorporationIdIndustryJobs200Ok', function() {
        // TODO: update the code to test GetCorporationsCorporationIdIndustryJobs200Ok
        expect(instance).to.be.a(EveApi.GetCorporationsCorporationIdIndustryJobs200Ok);
      });

      it('should have the property activity_id (base name: "activity_id")', function() {
        // TODO: update the code to test the property activity_id
        expect(instance).to.have.property('activity_id');
        // expect(instance.activity_id).to.be(expectedValueLiteral);
      });

      it('should have the property blueprint_id (base name: "blueprint_id")', function() {
        // TODO: update the code to test the property blueprint_id
        expect(instance).to.have.property('blueprint_id');
        // expect(instance.blueprint_id).to.be(expectedValueLiteral);
      });

      it('should have the property blueprint_location_id (base name: "blueprint_location_id")', function() {
        // TODO: update the code to test the property blueprint_location_id
        expect(instance).to.have.property('blueprint_location_id');
        // expect(instance.blueprint_location_id).to.be(expectedValueLiteral);
      });

      it('should have the property blueprint_type_id (base name: "blueprint_type_id")', function() {
        // TODO: update the code to test the property blueprint_type_id
        expect(instance).to.have.property('blueprint_type_id');
        // expect(instance.blueprint_type_id).to.be(expectedValueLiteral);
      });

      it('should have the property completed_character_id (base name: "completed_character_id")', function() {
        // TODO: update the code to test the property completed_character_id
        expect(instance).to.have.property('completed_character_id');
        // expect(instance.completed_character_id).to.be(expectedValueLiteral);
      });

      it('should have the property completed_date (base name: "completed_date")', function() {
        // TODO: update the code to test the property completed_date
        expect(instance).to.have.property('completed_date');
        // expect(instance.completed_date).to.be(expectedValueLiteral);
      });

      it('should have the property cost (base name: "cost")', function() {
        // TODO: update the code to test the property cost
        expect(instance).to.have.property('cost');
        // expect(instance.cost).to.be(expectedValueLiteral);
      });

      it('should have the property duration (base name: "duration")', function() {
        // TODO: update the code to test the property duration
        expect(instance).to.have.property('duration');
        // expect(instance.duration).to.be(expectedValueLiteral);
      });

      it('should have the property end_date (base name: "end_date")', function() {
        // TODO: update the code to test the property end_date
        expect(instance).to.have.property('end_date');
        // expect(instance.end_date).to.be(expectedValueLiteral);
      });

      it('should have the property facility_id (base name: "facility_id")', function() {
        // TODO: update the code to test the property facility_id
        expect(instance).to.have.property('facility_id');
        // expect(instance.facility_id).to.be(expectedValueLiteral);
      });

      it('should have the property installer_id (base name: "installer_id")', function() {
        // TODO: update the code to test the property installer_id
        expect(instance).to.have.property('installer_id');
        // expect(instance.installer_id).to.be(expectedValueLiteral);
      });

      it('should have the property job_id (base name: "job_id")', function() {
        // TODO: update the code to test the property job_id
        expect(instance).to.have.property('job_id');
        // expect(instance.job_id).to.be(expectedValueLiteral);
      });

      it('should have the property licensed_runs (base name: "licensed_runs")', function() {
        // TODO: update the code to test the property licensed_runs
        expect(instance).to.have.property('licensed_runs');
        // expect(instance.licensed_runs).to.be(expectedValueLiteral);
      });

      it('should have the property location_id (base name: "location_id")', function() {
        // TODO: update the code to test the property location_id
        expect(instance).to.have.property('location_id');
        // expect(instance.location_id).to.be(expectedValueLiteral);
      });

      it('should have the property output_location_id (base name: "output_location_id")', function() {
        // TODO: update the code to test the property output_location_id
        expect(instance).to.have.property('output_location_id');
        // expect(instance.output_location_id).to.be(expectedValueLiteral);
      });

      it('should have the property pause_date (base name: "pause_date")', function() {
        // TODO: update the code to test the property pause_date
        expect(instance).to.have.property('pause_date');
        // expect(instance.pause_date).to.be(expectedValueLiteral);
      });

      it('should have the property probability (base name: "probability")', function() {
        // TODO: update the code to test the property probability
        expect(instance).to.have.property('probability');
        // expect(instance.probability).to.be(expectedValueLiteral);
      });

      it('should have the property product_type_id (base name: "product_type_id")', function() {
        // TODO: update the code to test the property product_type_id
        expect(instance).to.have.property('product_type_id');
        // expect(instance.product_type_id).to.be(expectedValueLiteral);
      });

      it('should have the property runs (base name: "runs")', function() {
        // TODO: update the code to test the property runs
        expect(instance).to.have.property('runs');
        // expect(instance.runs).to.be(expectedValueLiteral);
      });

      it('should have the property start_date (base name: "start_date")', function() {
        // TODO: update the code to test the property start_date
        expect(instance).to.have.property('start_date');
        // expect(instance.start_date).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property successful_runs (base name: "successful_runs")', function() {
        // TODO: update the code to test the property successful_runs
        expect(instance).to.have.property('successful_runs');
        // expect(instance.successful_runs).to.be(expectedValueLiteral);
      });

    });
  });

}));
