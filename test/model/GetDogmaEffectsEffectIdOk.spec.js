/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveApi);
  }
}(this, function(expect, EveApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetDogmaEffectsEffectIdOk', function() {
      beforeEach(function() {
        instance = new EveApi.GetDogmaEffectsEffectIdOk();
      });

      it('should create an instance of GetDogmaEffectsEffectIdOk', function() {
        // TODO: update the code to test GetDogmaEffectsEffectIdOk
        expect(instance).to.be.a(EveApi.GetDogmaEffectsEffectIdOk);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property disallow_auto_repeat (base name: "disallow_auto_repeat")', function() {
        // TODO: update the code to test the property disallow_auto_repeat
        expect(instance).to.have.property('disallow_auto_repeat');
        // expect(instance.disallow_auto_repeat).to.be(expectedValueLiteral);
      });

      it('should have the property discharge_attribute_id (base name: "discharge_attribute_id")', function() {
        // TODO: update the code to test the property discharge_attribute_id
        expect(instance).to.have.property('discharge_attribute_id');
        // expect(instance.discharge_attribute_id).to.be(expectedValueLiteral);
      });

      it('should have the property display_name (base name: "display_name")', function() {
        // TODO: update the code to test the property display_name
        expect(instance).to.have.property('display_name');
        // expect(instance.display_name).to.be(expectedValueLiteral);
      });

      it('should have the property duration_attribute_id (base name: "duration_attribute_id")', function() {
        // TODO: update the code to test the property duration_attribute_id
        expect(instance).to.have.property('duration_attribute_id');
        // expect(instance.duration_attribute_id).to.be(expectedValueLiteral);
      });

      it('should have the property effect_category (base name: "effect_category")', function() {
        // TODO: update the code to test the property effect_category
        expect(instance).to.have.property('effect_category');
        // expect(instance.effect_category).to.be(expectedValueLiteral);
      });

      it('should have the property effect_id (base name: "effect_id")', function() {
        // TODO: update the code to test the property effect_id
        expect(instance).to.have.property('effect_id');
        // expect(instance.effect_id).to.be(expectedValueLiteral);
      });

      it('should have the property electronic_chance (base name: "electronic_chance")', function() {
        // TODO: update the code to test the property electronic_chance
        expect(instance).to.have.property('electronic_chance');
        // expect(instance.electronic_chance).to.be(expectedValueLiteral);
      });

      it('should have the property falloff_attribute_id (base name: "falloff_attribute_id")', function() {
        // TODO: update the code to test the property falloff_attribute_id
        expect(instance).to.have.property('falloff_attribute_id');
        // expect(instance.falloff_attribute_id).to.be(expectedValueLiteral);
      });

      it('should have the property icon_id (base name: "icon_id")', function() {
        // TODO: update the code to test the property icon_id
        expect(instance).to.have.property('icon_id');
        // expect(instance.icon_id).to.be(expectedValueLiteral);
      });

      it('should have the property is_assistance (base name: "is_assistance")', function() {
        // TODO: update the code to test the property is_assistance
        expect(instance).to.have.property('is_assistance');
        // expect(instance.is_assistance).to.be(expectedValueLiteral);
      });

      it('should have the property is_offensive (base name: "is_offensive")', function() {
        // TODO: update the code to test the property is_offensive
        expect(instance).to.have.property('is_offensive');
        // expect(instance.is_offensive).to.be(expectedValueLiteral);
      });

      it('should have the property is_warp_safe (base name: "is_warp_safe")', function() {
        // TODO: update the code to test the property is_warp_safe
        expect(instance).to.have.property('is_warp_safe');
        // expect(instance.is_warp_safe).to.be(expectedValueLiteral);
      });

      it('should have the property modifiers (base name: "modifiers")', function() {
        // TODO: update the code to test the property modifiers
        expect(instance).to.have.property('modifiers');
        // expect(instance.modifiers).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property post_expression (base name: "post_expression")', function() {
        // TODO: update the code to test the property post_expression
        expect(instance).to.have.property('post_expression');
        // expect(instance.post_expression).to.be(expectedValueLiteral);
      });

      it('should have the property pre_expression (base name: "pre_expression")', function() {
        // TODO: update the code to test the property pre_expression
        expect(instance).to.have.property('pre_expression');
        // expect(instance.pre_expression).to.be(expectedValueLiteral);
      });

      it('should have the property published (base name: "published")', function() {
        // TODO: update the code to test the property published
        expect(instance).to.have.property('published');
        // expect(instance.published).to.be(expectedValueLiteral);
      });

      it('should have the property range_attribute_id (base name: "range_attribute_id")', function() {
        // TODO: update the code to test the property range_attribute_id
        expect(instance).to.have.property('range_attribute_id');
        // expect(instance.range_attribute_id).to.be(expectedValueLiteral);
      });

      it('should have the property range_chance (base name: "range_chance")', function() {
        // TODO: update the code to test the property range_chance
        expect(instance).to.have.property('range_chance');
        // expect(instance.range_chance).to.be(expectedValueLiteral);
      });

      it('should have the property tracking_speed_attribute_id (base name: "tracking_speed_attribute_id")', function() {
        // TODO: update the code to test the property tracking_speed_attribute_id
        expect(instance).to.have.property('tracking_speed_attribute_id');
        // expect(instance.tracking_speed_attribute_id).to.be(expectedValueLiteral);
      });

    });
  });

}));
