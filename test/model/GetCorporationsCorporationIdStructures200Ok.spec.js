/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveApi);
  }
}(this, function(expect, EveApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetCorporationsCorporationIdStructures200Ok', function() {
      beforeEach(function() {
        instance = new EveApi.GetCorporationsCorporationIdStructures200Ok();
      });

      it('should create an instance of GetCorporationsCorporationIdStructures200Ok', function() {
        // TODO: update the code to test GetCorporationsCorporationIdStructures200Ok
        expect(instance).to.be.a(EveApi.GetCorporationsCorporationIdStructures200Ok);
      });

      it('should have the property corporation_id (base name: "corporation_id")', function() {
        // TODO: update the code to test the property corporation_id
        expect(instance).to.have.property('corporation_id');
        // expect(instance.corporation_id).to.be(expectedValueLiteral);
      });

      it('should have the property fuel_expires (base name: "fuel_expires")', function() {
        // TODO: update the code to test the property fuel_expires
        expect(instance).to.have.property('fuel_expires');
        // expect(instance.fuel_expires).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property next_reinforce_apply (base name: "next_reinforce_apply")', function() {
        // TODO: update the code to test the property next_reinforce_apply
        expect(instance).to.have.property('next_reinforce_apply');
        // expect(instance.next_reinforce_apply).to.be(expectedValueLiteral);
      });

      it('should have the property next_reinforce_hour (base name: "next_reinforce_hour")', function() {
        // TODO: update the code to test the property next_reinforce_hour
        expect(instance).to.have.property('next_reinforce_hour');
        // expect(instance.next_reinforce_hour).to.be(expectedValueLiteral);
      });

      it('should have the property profile_id (base name: "profile_id")', function() {
        // TODO: update the code to test the property profile_id
        expect(instance).to.have.property('profile_id');
        // expect(instance.profile_id).to.be(expectedValueLiteral);
      });

      it('should have the property reinforce_hour (base name: "reinforce_hour")', function() {
        // TODO: update the code to test the property reinforce_hour
        expect(instance).to.have.property('reinforce_hour');
        // expect(instance.reinforce_hour).to.be(expectedValueLiteral);
      });

      it('should have the property services (base name: "services")', function() {
        // TODO: update the code to test the property services
        expect(instance).to.have.property('services');
        // expect(instance.services).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property state_timer_end (base name: "state_timer_end")', function() {
        // TODO: update the code to test the property state_timer_end
        expect(instance).to.have.property('state_timer_end');
        // expect(instance.state_timer_end).to.be(expectedValueLiteral);
      });

      it('should have the property state_timer_start (base name: "state_timer_start")', function() {
        // TODO: update the code to test the property state_timer_start
        expect(instance).to.have.property('state_timer_start');
        // expect(instance.state_timer_start).to.be(expectedValueLiteral);
      });

      it('should have the property structure_id (base name: "structure_id")', function() {
        // TODO: update the code to test the property structure_id
        expect(instance).to.have.property('structure_id');
        // expect(instance.structure_id).to.be(expectedValueLiteral);
      });

      it('should have the property system_id (base name: "system_id")', function() {
        // TODO: update the code to test the property system_id
        expect(instance).to.have.property('system_id');
        // expect(instance.system_id).to.be(expectedValueLiteral);
      });

      it('should have the property type_id (base name: "type_id")', function() {
        // TODO: update the code to test the property type_id
        expect(instance).to.have.property('type_id');
        // expect(instance.type_id).to.be(expectedValueLiteral);
      });

      it('should have the property unanchors_at (base name: "unanchors_at")', function() {
        // TODO: update the code to test the property unanchors_at
        expect(instance).to.have.property('unanchors_at');
        // expect(instance.unanchors_at).to.be(expectedValueLiteral);
      });

    });
  });

}));
