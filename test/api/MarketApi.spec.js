/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveApi);
  }
}(this, function(expect, EveApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EveApi.MarketApi();
  });

  describe('(package)', function() {
    describe('MarketApi', function() {
      describe('getCharactersCharacterIdOrders', function() {
        it('should call getCharactersCharacterIdOrders successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdOrders call and complete the assertions
          /*
          var character_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCharactersCharacterIdOrders(character_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCharactersCharacterIdOrders200Ok);
              expect(data.duration).to.be.a('number');
              expect(data.duration).to.be(0);
              expect(data.escrow).to.be.a('number');
              expect(data.escrow).to.be(0.0);
              expect(data.is_buy_order).to.be.a('boolean');
              expect(data.is_buy_order).to.be(false);
              expect(data.is_corporation).to.be.a('boolean');
              expect(data.is_corporation).to.be(false);
              expect(data.issued).to.be.a(Date);
              expect(data.issued).to.be(new Date());
              expect(data.location_id).to.be.a('number');
              expect(data.location_id).to.be("0");
              expect(data.min_volume).to.be.a('number');
              expect(data.min_volume).to.be(0);
              expect(data.order_id).to.be.a('number');
              expect(data.order_id).to.be("0");
              expect(data.price).to.be.a('number');
              expect(data.price).to.be(0.0);
              expect(data.range).to.be.a('string');
              expect(data.range).to.be("1");
              expect(data.region_id).to.be.a('number');
              expect(data.region_id).to.be(0);
              expect(data.type_id).to.be.a('number');
              expect(data.type_id).to.be(0);
              expect(data.volume_remain).to.be.a('number');
              expect(data.volume_remain).to.be(0);
              expect(data.volume_total).to.be.a('number');
              expect(data.volume_total).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdOrdersHistory', function() {
        it('should call getCharactersCharacterIdOrdersHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdOrdersHistory call and complete the assertions
          /*
          var character_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCharactersCharacterIdOrdersHistory(character_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCharactersCharacterIdOrdersHistory200Ok);
              expect(data.duration).to.be.a('number');
              expect(data.duration).to.be(0);
              expect(data.escrow).to.be.a('number');
              expect(data.escrow).to.be(0.0);
              expect(data.is_buy_order).to.be.a('boolean');
              expect(data.is_buy_order).to.be(false);
              expect(data.is_corporation).to.be.a('boolean');
              expect(data.is_corporation).to.be(false);
              expect(data.issued).to.be.a(Date);
              expect(data.issued).to.be(new Date());
              expect(data.location_id).to.be.a('number');
              expect(data.location_id).to.be("0");
              expect(data.min_volume).to.be.a('number');
              expect(data.min_volume).to.be(0);
              expect(data.order_id).to.be.a('number');
              expect(data.order_id).to.be("0");
              expect(data.price).to.be.a('number');
              expect(data.price).to.be(0.0);
              expect(data.range).to.be.a('string');
              expect(data.range).to.be("1");
              expect(data.region_id).to.be.a('number');
              expect(data.region_id).to.be(0);
              expect(data.state).to.be.a('string');
              expect(data.state).to.be("cancelled");
              expect(data.type_id).to.be.a('number');
              expect(data.type_id).to.be(0);
              expect(data.volume_remain).to.be.a('number');
              expect(data.volume_remain).to.be(0);
              expect(data.volume_total).to.be.a('number');
              expect(data.volume_total).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdOrders', function() {
        it('should call getCorporationsCorporationIdOrders successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdOrders call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdOrders(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdOrders200Ok);
              expect(data.duration).to.be.a('number');
              expect(data.duration).to.be(0);
              expect(data.escrow).to.be.a('number');
              expect(data.escrow).to.be(0.0);
              expect(data.is_buy_order).to.be.a('boolean');
              expect(data.is_buy_order).to.be(false);
              expect(data.issued).to.be.a(Date);
              expect(data.issued).to.be(new Date());
              expect(data.issued_by).to.be.a('number');
              expect(data.issued_by).to.be(0);
              expect(data.location_id).to.be.a('number');
              expect(data.location_id).to.be("0");
              expect(data.min_volume).to.be.a('number');
              expect(data.min_volume).to.be(0);
              expect(data.order_id).to.be.a('number');
              expect(data.order_id).to.be("0");
              expect(data.price).to.be.a('number');
              expect(data.price).to.be(0.0);
              expect(data.range).to.be.a('string');
              expect(data.range).to.be("1");
              expect(data.region_id).to.be.a('number');
              expect(data.region_id).to.be(0);
              expect(data.type_id).to.be.a('number');
              expect(data.type_id).to.be(0);
              expect(data.volume_remain).to.be.a('number');
              expect(data.volume_remain).to.be(0);
              expect(data.volume_total).to.be.a('number');
              expect(data.volume_total).to.be(0);
              expect(data.wallet_division).to.be.a('number');
              expect(data.wallet_division).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdOrdersHistory', function() {
        it('should call getCorporationsCorporationIdOrdersHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdOrdersHistory call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdOrdersHistory(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdOrdersHistory200Ok);
              expect(data.duration).to.be.a('number');
              expect(data.duration).to.be(0);
              expect(data.escrow).to.be.a('number');
              expect(data.escrow).to.be(0.0);
              expect(data.is_buy_order).to.be.a('boolean');
              expect(data.is_buy_order).to.be(false);
              expect(data.issued).to.be.a(Date);
              expect(data.issued).to.be(new Date());
              expect(data.issued_by).to.be.a('number');
              expect(data.issued_by).to.be(0);
              expect(data.location_id).to.be.a('number');
              expect(data.location_id).to.be("0");
              expect(data.min_volume).to.be.a('number');
              expect(data.min_volume).to.be(0);
              expect(data.order_id).to.be.a('number');
              expect(data.order_id).to.be("0");
              expect(data.price).to.be.a('number');
              expect(data.price).to.be(0.0);
              expect(data.range).to.be.a('string');
              expect(data.range).to.be("1");
              expect(data.region_id).to.be.a('number');
              expect(data.region_id).to.be(0);
              expect(data.state).to.be.a('string');
              expect(data.state).to.be("cancelled");
              expect(data.type_id).to.be.a('number');
              expect(data.type_id).to.be(0);
              expect(data.volume_remain).to.be.a('number');
              expect(data.volume_remain).to.be(0);
              expect(data.volume_total).to.be.a('number');
              expect(data.volume_total).to.be(0);
              expect(data.wallet_division).to.be.a('number');
              expect(data.wallet_division).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMarketsGroups', function() {
        it('should call getMarketsGroups successfully', function(done) {
          // TODO: uncomment, update parameter values for getMarketsGroups call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getMarketsGroups(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMarketsGroupsMarketGroupId', function() {
        it('should call getMarketsGroupsMarketGroupId successfully', function(done) {
          // TODO: uncomment, update parameter values for getMarketsGroupsMarketGroupId call and complete the assertions
          /*
          var market_group_id = 56;
          var opts = {};
          opts.Accept_Language = "en";
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.language = "en";

          instance.getMarketsGroupsMarketGroupId(market_group_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetMarketsGroupsMarketGroupIdOk);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.market_group_id).to.be.a('number');
            expect(data.market_group_id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.parent_group_id).to.be.a('number');
            expect(data.parent_group_id).to.be(0);
            {
              let dataCtr = data.types;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMarketsPrices', function() {
        it('should call getMarketsPrices successfully', function(done) {
          // TODO: uncomment, update parameter values for getMarketsPrices call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getMarketsPrices(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetMarketsPrices200Ok);
              expect(data.adjusted_price).to.be.a('number');
              expect(data.adjusted_price).to.be(0.0);
              expect(data.average_price).to.be.a('number');
              expect(data.average_price).to.be(0.0);
              expect(data.type_id).to.be.a('number');
              expect(data.type_id).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMarketsRegionIdHistory', function() {
        it('should call getMarketsRegionIdHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getMarketsRegionIdHistory call and complete the assertions
          /*
          var region_id = 56;
          var type_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getMarketsRegionIdHistory(region_id, type_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetMarketsRegionIdHistory200Ok);
              expect(data.average).to.be.a('number');
              expect(data.average).to.be(0.0);
              expect(data._date).to.be.a(Date);
              expect(data._date).to.be(new Date());
              expect(data.highest).to.be.a('number');
              expect(data.highest).to.be(0.0);
              expect(data.lowest).to.be.a('number');
              expect(data.lowest).to.be(0.0);
              expect(data.order_count).to.be.a('number');
              expect(data.order_count).to.be("0");
              expect(data.volume).to.be.a('number');
              expect(data.volume).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMarketsRegionIdOrders', function() {
        it('should call getMarketsRegionIdOrders successfully', function(done) {
          // TODO: uncomment, update parameter values for getMarketsRegionIdOrders call and complete the assertions
          /*
          var order_type = "all";
          var region_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.type_id = 56;

          instance.getMarketsRegionIdOrders(order_type, region_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetMarketsRegionIdOrders200Ok);
              expect(data.duration).to.be.a('number');
              expect(data.duration).to.be(0);
              expect(data.is_buy_order).to.be.a('boolean');
              expect(data.is_buy_order).to.be(false);
              expect(data.issued).to.be.a(Date);
              expect(data.issued).to.be(new Date());
              expect(data.location_id).to.be.a('number');
              expect(data.location_id).to.be("0");
              expect(data.min_volume).to.be.a('number');
              expect(data.min_volume).to.be(0);
              expect(data.order_id).to.be.a('number');
              expect(data.order_id).to.be("0");
              expect(data.price).to.be.a('number');
              expect(data.price).to.be(0.0);
              expect(data.range).to.be.a('string');
              expect(data.range).to.be("station");
              expect(data.system_id).to.be.a('number');
              expect(data.system_id).to.be(0);
              expect(data.type_id).to.be.a('number');
              expect(data.type_id).to.be(0);
              expect(data.volume_remain).to.be.a('number');
              expect(data.volume_remain).to.be(0);
              expect(data.volume_total).to.be.a('number');
              expect(data.volume_total).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMarketsRegionIdTypes', function() {
        it('should call getMarketsRegionIdTypes successfully', function(done) {
          // TODO: uncomment, update parameter values for getMarketsRegionIdTypes call and complete the assertions
          /*
          var region_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;

          instance.getMarketsRegionIdTypes(region_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMarketsStructuresStructureId', function() {
        it('should call getMarketsStructuresStructureId successfully', function(done) {
          // TODO: uncomment, update parameter values for getMarketsStructuresStructureId call and complete the assertions
          /*
          var structure_id = 789;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getMarketsStructuresStructureId(structure_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetMarketsStructuresStructureId200Ok);
              expect(data.duration).to.be.a('number');
              expect(data.duration).to.be(0);
              expect(data.is_buy_order).to.be.a('boolean');
              expect(data.is_buy_order).to.be(false);
              expect(data.issued).to.be.a(Date);
              expect(data.issued).to.be(new Date());
              expect(data.location_id).to.be.a('number');
              expect(data.location_id).to.be("0");
              expect(data.min_volume).to.be.a('number');
              expect(data.min_volume).to.be(0);
              expect(data.order_id).to.be.a('number');
              expect(data.order_id).to.be("0");
              expect(data.price).to.be.a('number');
              expect(data.price).to.be(0.0);
              expect(data.range).to.be.a('string');
              expect(data.range).to.be("station");
              expect(data.type_id).to.be.a('number');
              expect(data.type_id).to.be(0);
              expect(data.volume_remain).to.be.a('number');
              expect(data.volume_remain).to.be(0);
              expect(data.volume_total).to.be.a('number');
              expect(data.volume_total).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
