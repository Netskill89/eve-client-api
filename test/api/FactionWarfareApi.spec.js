/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveApi);
  }
}(this, function(expect, EveApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EveApi.FactionWarfareApi();
  });

  describe('(package)', function() {
    describe('FactionWarfareApi', function() {
      describe('getCharactersCharacterIdFwStats', function() {
        it('should call getCharactersCharacterIdFwStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdFwStats call and complete the assertions
          /*
          var character_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCharactersCharacterIdFwStats(character_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetCharactersCharacterIdFwStatsOk);
            expect(data.current_rank).to.be.a('number');
            expect(data.current_rank).to.be(0);
            expect(data.enlisted_on).to.be.a(Date);
            expect(data.enlisted_on).to.be(new Date());
            expect(data.faction_id).to.be.a('number');
            expect(data.faction_id).to.be(0);
            expect(data.highest_rank).to.be.a('number');
            expect(data.highest_rank).to.be(0);
            expect(data.kills).to.be.a(EveApi.GetCharactersCharacterIdFwStatsKills);
                  expect(data.kills.last_week).to.be.a('number');
              expect(data.kills.last_week).to.be(0);
              expect(data.kills.total).to.be.a('number');
              expect(data.kills.total).to.be(0);
              expect(data.kills.yesterday).to.be.a('number');
              expect(data.kills.yesterday).to.be(0);
            expect(data.victory_points).to.be.a(EveApi.GetCharactersCharacterIdFwStatsVictoryPoints);
                  expect(data.victory_points.last_week).to.be.a('number');
              expect(data.victory_points.last_week).to.be(0);
              expect(data.victory_points.total).to.be.a('number');
              expect(data.victory_points.total).to.be(0);
              expect(data.victory_points.yesterday).to.be.a('number');
              expect(data.victory_points.yesterday).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdFwStats', function() {
        it('should call getCorporationsCorporationIdFwStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdFwStats call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdFwStats(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetCorporationsCorporationIdFwStatsOk);
            expect(data.enlisted_on).to.be.a(Date);
            expect(data.enlisted_on).to.be(new Date());
            expect(data.faction_id).to.be.a('number');
            expect(data.faction_id).to.be(0);
            expect(data.kills).to.be.a(EveApi.GetCorporationsCorporationIdFwStatsKills);
                  expect(data.kills.last_week).to.be.a('number');
              expect(data.kills.last_week).to.be(0);
              expect(data.kills.total).to.be.a('number');
              expect(data.kills.total).to.be(0);
              expect(data.kills.yesterday).to.be.a('number');
              expect(data.kills.yesterday).to.be(0);
            expect(data.pilots).to.be.a('number');
            expect(data.pilots).to.be(0);
            expect(data.victory_points).to.be.a(EveApi.GetCorporationsCorporationIdFwStatsVictoryPoints);
                  expect(data.victory_points.last_week).to.be.a('number');
              expect(data.victory_points.last_week).to.be(0);
              expect(data.victory_points.total).to.be.a('number');
              expect(data.victory_points.total).to.be(0);
              expect(data.victory_points.yesterday).to.be.a('number');
              expect(data.victory_points.yesterday).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFwLeaderboards', function() {
        it('should call getFwLeaderboards successfully', function(done) {
          // TODO: uncomment, update parameter values for getFwLeaderboards call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getFwLeaderboards(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetFwLeaderboardsOk);
            expect(data.kills).to.be.a(EveApi.GetFwLeaderboardsKills);
                  {
                let dataCtr = data.kills.active_total;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFwLeaderboardsActiveTotalActiveTotal);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0);
                  expect(data.faction_id).to.be.a('number');
                  expect(data.faction_id).to.be(0);
  
                        }
              }
              {
                let dataCtr = data.kills.last_week;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFwLeaderboardsLastWeekLastWeek);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0);
                  expect(data.faction_id).to.be.a('number');
                  expect(data.faction_id).to.be(0);
  
                        }
              }
              {
                let dataCtr = data.kills.yesterday;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFwLeaderboardsYesterdayYesterday);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0);
                  expect(data.faction_id).to.be.a('number');
                  expect(data.faction_id).to.be(0);
  
                        }
              }
            expect(data.victory_points).to.be.a(EveApi.GetFwLeaderboardsVictoryPoints);
                  {
                let dataCtr = data.victory_points.active_total;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFwLeaderboardsActiveTotalActiveTotal1);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0);
                  expect(data.faction_id).to.be.a('number');
                  expect(data.faction_id).to.be(0);
  
                        }
              }
              {
                let dataCtr = data.victory_points.last_week;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFwLeaderboardsLastWeekLastWeek1);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0);
                  expect(data.faction_id).to.be.a('number');
                  expect(data.faction_id).to.be(0);
  
                        }
              }
              {
                let dataCtr = data.victory_points.yesterday;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFwLeaderboardsYesterdayYesterday1);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0);
                  expect(data.faction_id).to.be.a('number');
                  expect(data.faction_id).to.be(0);
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFwLeaderboardsCharacters', function() {
        it('should call getFwLeaderboardsCharacters successfully', function(done) {
          // TODO: uncomment, update parameter values for getFwLeaderboardsCharacters call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getFwLeaderboardsCharacters(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetFwLeaderboardsCharactersOk);
            expect(data.kills).to.be.a(EveApi.GetFwLeaderboardsCharactersKills);
                  {
                let dataCtr = data.kills.active_total;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFwLeaderboardsCharactersActiveTotalActiveTotal);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0);
                  expect(data.character_id).to.be.a('number');
                  expect(data.character_id).to.be(0);
  
                        }
              }
              {
                let dataCtr = data.kills.last_week;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFwLeaderboardsCharactersLastWeekLastWeek);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0);
                  expect(data.character_id).to.be.a('number');
                  expect(data.character_id).to.be(0);
  
                        }
              }
              {
                let dataCtr = data.kills.yesterday;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFwLeaderboardsCharactersYesterdayYesterday);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0);
                  expect(data.character_id).to.be.a('number');
                  expect(data.character_id).to.be(0);
  
                        }
              }
            expect(data.victory_points).to.be.a(EveApi.GetFwLeaderboardsCharactersVictoryPoints);
                  {
                let dataCtr = data.victory_points.active_total;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFwLeaderboardsCharactersActiveTotalActiveTotal1);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0);
                  expect(data.character_id).to.be.a('number');
                  expect(data.character_id).to.be(0);
  
                        }
              }
              {
                let dataCtr = data.victory_points.last_week;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFwLeaderboardsCharactersLastWeekLastWeek1);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0);
                  expect(data.character_id).to.be.a('number');
                  expect(data.character_id).to.be(0);
  
                        }
              }
              {
                let dataCtr = data.victory_points.yesterday;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFwLeaderboardsCharactersYesterdayYesterday1);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0);
                  expect(data.character_id).to.be.a('number');
                  expect(data.character_id).to.be(0);
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFwLeaderboardsCorporations', function() {
        it('should call getFwLeaderboardsCorporations successfully', function(done) {
          // TODO: uncomment, update parameter values for getFwLeaderboardsCorporations call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getFwLeaderboardsCorporations(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetFwLeaderboardsCorporationsOk);
            expect(data.kills).to.be.a(EveApi.GetFwLeaderboardsCorporationsKills);
                  {
                let dataCtr = data.kills.active_total;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFwLeaderboardsCorporationsActiveTotalActiveTotal);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0);
                  expect(data.corporation_id).to.be.a('number');
                  expect(data.corporation_id).to.be(0);
  
                        }
              }
              {
                let dataCtr = data.kills.last_week;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFwLeaderboardsCorporationsLastWeekLastWeek);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0);
                  expect(data.corporation_id).to.be.a('number');
                  expect(data.corporation_id).to.be(0);
  
                        }
              }
              {
                let dataCtr = data.kills.yesterday;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFwLeaderboardsCorporationsYesterdayYesterday);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0);
                  expect(data.corporation_id).to.be.a('number');
                  expect(data.corporation_id).to.be(0);
  
                        }
              }
            expect(data.victory_points).to.be.a(EveApi.GetFwLeaderboardsCorporationsVictoryPoints);
                  {
                let dataCtr = data.victory_points.active_total;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFwLeaderboardsCorporationsActiveTotalActiveTotal1);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0);
                  expect(data.corporation_id).to.be.a('number');
                  expect(data.corporation_id).to.be(0);
  
                        }
              }
              {
                let dataCtr = data.victory_points.last_week;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFwLeaderboardsCorporationsLastWeekLastWeek1);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0);
                  expect(data.corporation_id).to.be.a('number');
                  expect(data.corporation_id).to.be(0);
  
                        }
              }
              {
                let dataCtr = data.victory_points.yesterday;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFwLeaderboardsCorporationsYesterdayYesterday1);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0);
                  expect(data.corporation_id).to.be.a('number');
                  expect(data.corporation_id).to.be(0);
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFwStats', function() {
        it('should call getFwStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getFwStats call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getFwStats(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetFwStats200Ok);
              expect(data.faction_id).to.be.a('number');
              expect(data.faction_id).to.be(0);
              expect(data.kills).to.be.a(EveApi.GetFwStatsKills);
                    expect(data.kills.last_week).to.be.a('number');
                expect(data.kills.last_week).to.be(0);
                expect(data.kills.total).to.be.a('number');
                expect(data.kills.total).to.be(0);
                expect(data.kills.yesterday).to.be.a('number');
                expect(data.kills.yesterday).to.be(0);
              expect(data.pilots).to.be.a('number');
              expect(data.pilots).to.be(0);
              expect(data.systems_controlled).to.be.a('number');
              expect(data.systems_controlled).to.be(0);
              expect(data.victory_points).to.be.a(EveApi.GetFwStatsVictoryPoints);
                    expect(data.victory_points.last_week).to.be.a('number');
                expect(data.victory_points.last_week).to.be(0);
                expect(data.victory_points.total).to.be.a('number');
                expect(data.victory_points.total).to.be(0);
                expect(data.victory_points.yesterday).to.be.a('number');
                expect(data.victory_points.yesterday).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFwSystems', function() {
        it('should call getFwSystems successfully', function(done) {
          // TODO: uncomment, update parameter values for getFwSystems call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getFwSystems(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetFwSystems200Ok);
              expect(data.contested).to.be.a('string');
              expect(data.contested).to.be("captured");
              expect(data.occupier_faction_id).to.be.a('number');
              expect(data.occupier_faction_id).to.be(0);
              expect(data.owner_faction_id).to.be.a('number');
              expect(data.owner_faction_id).to.be(0);
              expect(data.solar_system_id).to.be.a('number');
              expect(data.solar_system_id).to.be(0);
              expect(data.victory_points).to.be.a('number');
              expect(data.victory_points).to.be(0);
              expect(data.victory_points_threshold).to.be.a('number');
              expect(data.victory_points_threshold).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFwWars', function() {
        it('should call getFwWars successfully', function(done) {
          // TODO: uncomment, update parameter values for getFwWars call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getFwWars(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetFwWars200Ok);
              expect(data.against_id).to.be.a('number');
              expect(data.against_id).to.be(0);
              expect(data.faction_id).to.be.a('number');
              expect(data.faction_id).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
