/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveApi);
  }
}(this, function(expect, EveApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EveApi.ContactsApi();
  });

  describe('(package)', function() {
    describe('ContactsApi', function() {
      describe('deleteCharactersCharacterIdContacts', function() {
        it('should call deleteCharactersCharacterIdContacts successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteCharactersCharacterIdContacts call
          /*
          var character_id = 56;
          var contact_ids = [3.4];
          var opts = {};
          opts.datasource = "tranquility";
          opts.token = "token_example";

          instance.deleteCharactersCharacterIdContacts(character_id, contact_ids, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAlliancesAllianceIdContacts', function() {
        it('should call getAlliancesAllianceIdContacts successfully', function(done) {
          // TODO: uncomment, update parameter values for getAlliancesAllianceIdContacts call and complete the assertions
          /*
          var alliance_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getAlliancesAllianceIdContacts(alliance_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetAlliancesAllianceIdContacts200Ok);
              expect(data.contact_id).to.be.a('number');
              expect(data.contact_id).to.be(0);
              expect(data.contact_type).to.be.a('string');
              expect(data.contact_type).to.be("character");
              {
                let dataCtr = data.label_ids;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be("0");
                }
              }
              expect(data.standing).to.be.a('number');
              expect(data.standing).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAlliancesAllianceIdContactsLabels', function() {
        it('should call getAlliancesAllianceIdContactsLabels successfully', function(done) {
          // TODO: uncomment, update parameter values for getAlliancesAllianceIdContactsLabels call and complete the assertions
          /*
          var alliance_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getAlliancesAllianceIdContactsLabels(alliance_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetAlliancesAllianceIdContactsLabels200Ok);
              expect(data.label_id).to.be.a('number');
              expect(data.label_id).to.be("0");
              expect(data.label_name).to.be.a('string');
              expect(data.label_name).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdContacts', function() {
        it('should call getCharactersCharacterIdContacts successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdContacts call and complete the assertions
          /*
          var character_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCharactersCharacterIdContacts(character_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCharactersCharacterIdContacts200Ok);
              expect(data.contact_id).to.be.a('number');
              expect(data.contact_id).to.be(0);
              expect(data.contact_type).to.be.a('string');
              expect(data.contact_type).to.be("character");
              expect(data.is_blocked).to.be.a('boolean');
              expect(data.is_blocked).to.be(false);
              expect(data.is_watched).to.be.a('boolean');
              expect(data.is_watched).to.be(false);
              {
                let dataCtr = data.label_ids;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be("0");
                }
              }
              expect(data.standing).to.be.a('number');
              expect(data.standing).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdContactsLabels', function() {
        it('should call getCharactersCharacterIdContactsLabels successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdContactsLabels call and complete the assertions
          /*
          var character_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCharactersCharacterIdContactsLabels(character_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCharactersCharacterIdContactsLabels200Ok);
              expect(data.label_id).to.be.a('number');
              expect(data.label_id).to.be("0");
              expect(data.label_name).to.be.a('string');
              expect(data.label_name).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdContacts', function() {
        it('should call getCorporationsCorporationIdContacts successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdContacts call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdContacts(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdContacts200Ok);
              expect(data.contact_id).to.be.a('number');
              expect(data.contact_id).to.be(0);
              expect(data.contact_type).to.be.a('string');
              expect(data.contact_type).to.be("character");
              expect(data.is_watched).to.be.a('boolean');
              expect(data.is_watched).to.be(false);
              {
                let dataCtr = data.label_ids;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be("0");
                }
              }
              expect(data.standing).to.be.a('number');
              expect(data.standing).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdContactsLabels', function() {
        it('should call getCorporationsCorporationIdContactsLabels successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdContactsLabels call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdContactsLabels(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdContactsLabels200Ok);
              expect(data.label_id).to.be.a('number');
              expect(data.label_id).to.be("0");
              expect(data.label_name).to.be.a('string');
              expect(data.label_name).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postCharactersCharacterIdContacts', function() {
        it('should call postCharactersCharacterIdContacts successfully', function(done) {
          // TODO: uncomment, update parameter values for postCharactersCharacterIdContacts call and complete the assertions
          /*
          var character_id = 56;
          var contact_ids = [new EveApi.[Number]()];
          var standing = 3.4;
          var opts = {};
          opts.datasource = "tranquility";
          opts.label_ids = [3.4];
          opts.token = "token_example";
          opts.watched = false;

          instance.postCharactersCharacterIdContacts(character_id, contact_ids, standing, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putCharactersCharacterIdContacts', function() {
        it('should call putCharactersCharacterIdContacts successfully', function(done) {
          // TODO: uncomment, update parameter values for putCharactersCharacterIdContacts call
          /*
          var character_id = 56;
          var contact_ids = [new EveApi.[Number]()];
          var standing = 3.4;
          var opts = {};
          opts.datasource = "tranquility";
          opts.label_ids = [3.4];
          opts.token = "token_example";
          opts.watched = false;

          instance.putCharactersCharacterIdContacts(character_id, contact_ids, standing, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
