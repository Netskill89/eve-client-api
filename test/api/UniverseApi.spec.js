/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveApi);
  }
}(this, function(expect, EveApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EveApi.UniverseApi();
  });

  describe('(package)', function() {
    describe('UniverseApi', function() {
      describe('getUniverseAncestries', function() {
        it('should call getUniverseAncestries successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseAncestries call and complete the assertions
          /*
          var opts = {};
          opts.Accept_Language = "en";
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.language = "en";

          instance.getUniverseAncestries(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetUniverseAncestries200Ok);
              expect(data.bloodline_id).to.be.a('number');
              expect(data.bloodline_id).to.be(0);
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.icon_id).to.be.a('number');
              expect(data.icon_id).to.be(0);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.short_description).to.be.a('string');
              expect(data.short_description).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseAsteroidBeltsAsteroidBeltId', function() {
        it('should call getUniverseAsteroidBeltsAsteroidBeltId successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseAsteroidBeltsAsteroidBeltId call and complete the assertions
          /*
          var asteroid_belt_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getUniverseAsteroidBeltsAsteroidBeltId(asteroid_belt_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetUniverseAsteroidBeltsAsteroidBeltIdOk);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.position).to.be.a(EveApi.GetUniverseAsteroidBeltsAsteroidBeltIdPosition);
                  expect(data.position.x).to.be.a('number');
              expect(data.position.x).to.be(0.0);
              expect(data.position.y).to.be.a('number');
              expect(data.position.y).to.be(0.0);
              expect(data.position.z).to.be.a('number');
              expect(data.position.z).to.be(0.0);
            expect(data.system_id).to.be.a('number');
            expect(data.system_id).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseBloodlines', function() {
        it('should call getUniverseBloodlines successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseBloodlines call and complete the assertions
          /*
          var opts = {};
          opts.Accept_Language = "en";
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.language = "en";

          instance.getUniverseBloodlines(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetUniverseBloodlines200Ok);
              expect(data.bloodline_id).to.be.a('number');
              expect(data.bloodline_id).to.be(0);
              expect(data.charisma).to.be.a('number');
              expect(data.charisma).to.be(0);
              expect(data.corporation_id).to.be.a('number');
              expect(data.corporation_id).to.be(0);
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.intelligence).to.be.a('number');
              expect(data.intelligence).to.be(0);
              expect(data.memory).to.be.a('number');
              expect(data.memory).to.be(0);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.perception).to.be.a('number');
              expect(data.perception).to.be(0);
              expect(data.race_id).to.be.a('number');
              expect(data.race_id).to.be(0);
              expect(data.ship_type_id).to.be.a('number');
              expect(data.ship_type_id).to.be(0);
              expect(data.willpower).to.be.a('number');
              expect(data.willpower).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseCategories', function() {
        it('should call getUniverseCategories successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseCategories call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getUniverseCategories(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseCategoriesCategoryId', function() {
        it('should call getUniverseCategoriesCategoryId successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseCategoriesCategoryId call and complete the assertions
          /*
          var category_id = 56;
          var opts = {};
          opts.Accept_Language = "en";
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.language = "en";

          instance.getUniverseCategoriesCategoryId(category_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetUniverseCategoriesCategoryIdOk);
            expect(data.category_id).to.be.a('number');
            expect(data.category_id).to.be(0);
            {
              let dataCtr = data.groups;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.published).to.be.a('boolean');
            expect(data.published).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseConstellations', function() {
        it('should call getUniverseConstellations successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseConstellations call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getUniverseConstellations(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseConstellationsConstellationId', function() {
        it('should call getUniverseConstellationsConstellationId successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseConstellationsConstellationId call and complete the assertions
          /*
          var constellation_id = 56;
          var opts = {};
          opts.Accept_Language = "en";
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.language = "en";

          instance.getUniverseConstellationsConstellationId(constellation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetUniverseConstellationsConstellationIdOk);
            expect(data.constellation_id).to.be.a('number');
            expect(data.constellation_id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.position).to.be.a(EveApi.GetUniverseConstellationsConstellationIdPosition);
                  expect(data.position.x).to.be.a('number');
              expect(data.position.x).to.be(0.0);
              expect(data.position.y).to.be.a('number');
              expect(data.position.y).to.be(0.0);
              expect(data.position.z).to.be.a('number');
              expect(data.position.z).to.be(0.0);
            expect(data.region_id).to.be.a('number');
            expect(data.region_id).to.be(0);
            {
              let dataCtr = data.systems;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseFactions', function() {
        it('should call getUniverseFactions successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseFactions call and complete the assertions
          /*
          var opts = {};
          opts.Accept_Language = "en";
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.language = "en";

          instance.getUniverseFactions(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetUniverseFactions200Ok);
              expect(data.corporation_id).to.be.a('number');
              expect(data.corporation_id).to.be(0);
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.faction_id).to.be.a('number');
              expect(data.faction_id).to.be(0);
              expect(data.is_unique).to.be.a('boolean');
              expect(data.is_unique).to.be(false);
              expect(data.militia_corporation_id).to.be.a('number');
              expect(data.militia_corporation_id).to.be(0);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.size_factor).to.be.a('number');
              expect(data.size_factor).to.be(0.0);
              expect(data.solar_system_id).to.be.a('number');
              expect(data.solar_system_id).to.be(0);
              expect(data.station_count).to.be.a('number');
              expect(data.station_count).to.be(0);
              expect(data.station_system_count).to.be.a('number');
              expect(data.station_system_count).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseGraphics', function() {
        it('should call getUniverseGraphics successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseGraphics call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getUniverseGraphics(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseGraphicsGraphicId', function() {
        it('should call getUniverseGraphicsGraphicId successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseGraphicsGraphicId call and complete the assertions
          /*
          var graphic_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getUniverseGraphicsGraphicId(graphic_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetUniverseGraphicsGraphicIdOk);
            expect(data.collision_file).to.be.a('string');
            expect(data.collision_file).to.be("");
            expect(data.graphic_file).to.be.a('string');
            expect(data.graphic_file).to.be("");
            expect(data.graphic_id).to.be.a('number');
            expect(data.graphic_id).to.be(0);
            expect(data.icon_folder).to.be.a('string');
            expect(data.icon_folder).to.be("");
            expect(data.sof_dna).to.be.a('string');
            expect(data.sof_dna).to.be("");
            expect(data.sof_fation_name).to.be.a('string');
            expect(data.sof_fation_name).to.be("");
            expect(data.sof_hull_name).to.be.a('string');
            expect(data.sof_hull_name).to.be("");
            expect(data.sof_race_name).to.be.a('string');
            expect(data.sof_race_name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseGroups', function() {
        it('should call getUniverseGroups successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseGroups call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;

          instance.getUniverseGroups(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseGroupsGroupId', function() {
        it('should call getUniverseGroupsGroupId successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseGroupsGroupId call and complete the assertions
          /*
          var group_id = 56;
          var opts = {};
          opts.Accept_Language = "en";
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.language = "en";

          instance.getUniverseGroupsGroupId(group_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetUniverseGroupsGroupIdOk);
            expect(data.category_id).to.be.a('number');
            expect(data.category_id).to.be(0);
            expect(data.group_id).to.be.a('number');
            expect(data.group_id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.published).to.be.a('boolean');
            expect(data.published).to.be(false);
            {
              let dataCtr = data.types;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseMoonsMoonId', function() {
        it('should call getUniverseMoonsMoonId successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseMoonsMoonId call and complete the assertions
          /*
          var moon_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getUniverseMoonsMoonId(moon_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetUniverseMoonsMoonIdOk);
            expect(data.moon_id).to.be.a('number');
            expect(data.moon_id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.position).to.be.a(EveApi.GetUniverseMoonsMoonIdPosition);
                  expect(data.position.x).to.be.a('number');
              expect(data.position.x).to.be(0.0);
              expect(data.position.y).to.be.a('number');
              expect(data.position.y).to.be(0.0);
              expect(data.position.z).to.be.a('number');
              expect(data.position.z).to.be(0.0);
            expect(data.system_id).to.be.a('number');
            expect(data.system_id).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniversePlanetsPlanetId', function() {
        it('should call getUniversePlanetsPlanetId successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniversePlanetsPlanetId call and complete the assertions
          /*
          var planet_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getUniversePlanetsPlanetId(planet_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetUniversePlanetsPlanetIdOk);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.planet_id).to.be.a('number');
            expect(data.planet_id).to.be(0);
            expect(data.position).to.be.a(EveApi.GetUniversePlanetsPlanetIdPosition);
                  expect(data.position.x).to.be.a('number');
              expect(data.position.x).to.be(0.0);
              expect(data.position.y).to.be.a('number');
              expect(data.position.y).to.be(0.0);
              expect(data.position.z).to.be.a('number');
              expect(data.position.z).to.be(0.0);
            expect(data.system_id).to.be.a('number');
            expect(data.system_id).to.be(0);
            expect(data.type_id).to.be.a('number');
            expect(data.type_id).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseRaces', function() {
        it('should call getUniverseRaces successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseRaces call and complete the assertions
          /*
          var opts = {};
          opts.Accept_Language = "en";
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.language = "en";

          instance.getUniverseRaces(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetUniverseRaces200Ok);
              expect(data.alliance_id).to.be.a('number');
              expect(data.alliance_id).to.be(0);
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.race_id).to.be.a('number');
              expect(data.race_id).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseRegions', function() {
        it('should call getUniverseRegions successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseRegions call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getUniverseRegions(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseRegionsRegionId', function() {
        it('should call getUniverseRegionsRegionId successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseRegionsRegionId call and complete the assertions
          /*
          var region_id = 56;
          var opts = {};
          opts.Accept_Language = "en";
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.language = "en";

          instance.getUniverseRegionsRegionId(region_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetUniverseRegionsRegionIdOk);
            {
              let dataCtr = data.constellations;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.region_id).to.be.a('number');
            expect(data.region_id).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseStargatesStargateId', function() {
        it('should call getUniverseStargatesStargateId successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseStargatesStargateId call and complete the assertions
          /*
          var stargate_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getUniverseStargatesStargateId(stargate_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetUniverseStargatesStargateIdOk);
            expect(data.destination).to.be.a(EveApi.GetUniverseStargatesStargateIdDestination);
                  expect(data.destination.stargate_id).to.be.a('number');
              expect(data.destination.stargate_id).to.be(0);
              expect(data.destination.system_id).to.be.a('number');
              expect(data.destination.system_id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.position).to.be.a(EveApi.GetUniverseStargatesStargateIdPosition);
                  expect(data.position.x).to.be.a('number');
              expect(data.position.x).to.be(0.0);
              expect(data.position.y).to.be.a('number');
              expect(data.position.y).to.be(0.0);
              expect(data.position.z).to.be.a('number');
              expect(data.position.z).to.be(0.0);
            expect(data.stargate_id).to.be.a('number');
            expect(data.stargate_id).to.be(0);
            expect(data.system_id).to.be.a('number');
            expect(data.system_id).to.be(0);
            expect(data.type_id).to.be.a('number');
            expect(data.type_id).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseStarsStarId', function() {
        it('should call getUniverseStarsStarId successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseStarsStarId call and complete the assertions
          /*
          var star_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getUniverseStarsStarId(star_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetUniverseStarsStarIdOk);
            expect(data.age).to.be.a('number');
            expect(data.age).to.be("0");
            expect(data.luminosity).to.be.a('number');
            expect(data.luminosity).to.be(0.0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.radius).to.be.a('number');
            expect(data.radius).to.be("0");
            expect(data.solar_system_id).to.be.a('number');
            expect(data.solar_system_id).to.be(0);
            expect(data.spectral_class).to.be.a('string');
            expect(data.spectral_class).to.be("K2 V");
            expect(data.temperature).to.be.a('number');
            expect(data.temperature).to.be(0);
            expect(data.type_id).to.be.a('number');
            expect(data.type_id).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseStationsStationId', function() {
        it('should call getUniverseStationsStationId successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseStationsStationId call and complete the assertions
          /*
          var station_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getUniverseStationsStationId(station_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetUniverseStationsStationIdOk);
            expect(data.max_dockable_ship_volume).to.be.a('number');
            expect(data.max_dockable_ship_volume).to.be(0.0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.office_rental_cost).to.be.a('number');
            expect(data.office_rental_cost).to.be(0.0);
            expect(data.owner).to.be.a('number');
            expect(data.owner).to.be(0);
            expect(data.position).to.be.a(EveApi.GetUniverseStationsStationIdPosition);
                  expect(data.position.x).to.be.a('number');
              expect(data.position.x).to.be(0.0);
              expect(data.position.y).to.be.a('number');
              expect(data.position.y).to.be(0.0);
              expect(data.position.z).to.be.a('number');
              expect(data.position.z).to.be(0.0);
            expect(data.race_id).to.be.a('number');
            expect(data.race_id).to.be(0);
            expect(data.reprocessing_efficiency).to.be.a('number');
            expect(data.reprocessing_efficiency).to.be(0.0);
            expect(data.reprocessing_stations_take).to.be.a('number');
            expect(data.reprocessing_stations_take).to.be(0.0);
            {
              let dataCtr = data.services;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("bounty-missions");
              }
            }
            expect(data.station_id).to.be.a('number');
            expect(data.station_id).to.be(0);
            expect(data.system_id).to.be.a('number');
            expect(data.system_id).to.be(0);
            expect(data.type_id).to.be.a('number');
            expect(data.type_id).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseStructures', function() {
        it('should call getUniverseStructures successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseStructures call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.filter = "filter_example";
          opts.If_None_Match = "If_None_Match_example";

          instance.getUniverseStructures(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseStructuresStructureId', function() {
        it('should call getUniverseStructuresStructureId successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseStructuresStructureId call and complete the assertions
          /*
          var structure_id = 789;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getUniverseStructuresStructureId(structure_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetUniverseStructuresStructureIdOk);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.owner_id).to.be.a('number');
            expect(data.owner_id).to.be(0);
            expect(data.position).to.be.a(EveApi.GetUniverseStructuresStructureIdPosition);
                  expect(data.position.x).to.be.a('number');
              expect(data.position.x).to.be(0.0);
              expect(data.position.y).to.be.a('number');
              expect(data.position.y).to.be(0.0);
              expect(data.position.z).to.be.a('number');
              expect(data.position.z).to.be(0.0);
            expect(data.solar_system_id).to.be.a('number');
            expect(data.solar_system_id).to.be(0);
            expect(data.type_id).to.be.a('number');
            expect(data.type_id).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseSystemJumps', function() {
        it('should call getUniverseSystemJumps successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseSystemJumps call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getUniverseSystemJumps(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetUniverseSystemJumps200Ok);
              expect(data.ship_jumps).to.be.a('number');
              expect(data.ship_jumps).to.be(0);
              expect(data.system_id).to.be.a('number');
              expect(data.system_id).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseSystemKills', function() {
        it('should call getUniverseSystemKills successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseSystemKills call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getUniverseSystemKills(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetUniverseSystemKills200Ok);
              expect(data.npc_kills).to.be.a('number');
              expect(data.npc_kills).to.be(0);
              expect(data.pod_kills).to.be.a('number');
              expect(data.pod_kills).to.be(0);
              expect(data.ship_kills).to.be.a('number');
              expect(data.ship_kills).to.be(0);
              expect(data.system_id).to.be.a('number');
              expect(data.system_id).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseSystems', function() {
        it('should call getUniverseSystems successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseSystems call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getUniverseSystems(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseSystemsSystemId', function() {
        it('should call getUniverseSystemsSystemId successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseSystemsSystemId call and complete the assertions
          /*
          var system_id = 56;
          var opts = {};
          opts.Accept_Language = "en";
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.language = "en";

          instance.getUniverseSystemsSystemId(system_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetUniverseSystemsSystemIdOk);
            expect(data.constellation_id).to.be.a('number');
            expect(data.constellation_id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            {
              let dataCtr = data.planets;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.GetUniverseSystemsSystemIdPlanet);
                {
                  let dataCtr = data.asteroid_belts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }
                {
                  let dataCtr = data.moons;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }
                expect(data.planet_id).to.be.a('number');
                expect(data.planet_id).to.be(0);

                      }
            }
            expect(data.position).to.be.a(EveApi.GetUniverseSystemsSystemIdPosition);
                  expect(data.position.x).to.be.a('number');
              expect(data.position.x).to.be(0.0);
              expect(data.position.y).to.be.a('number');
              expect(data.position.y).to.be(0.0);
              expect(data.position.z).to.be.a('number');
              expect(data.position.z).to.be(0.0);
            expect(data.security_class).to.be.a('string');
            expect(data.security_class).to.be("");
            expect(data.security_status).to.be.a('number');
            expect(data.security_status).to.be(0.0);
            expect(data.star_id).to.be.a('number');
            expect(data.star_id).to.be(0);
            {
              let dataCtr = data.stargates;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }
            {
              let dataCtr = data.stations;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }
            expect(data.system_id).to.be.a('number');
            expect(data.system_id).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseTypes', function() {
        it('should call getUniverseTypes successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseTypes call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;

          instance.getUniverseTypes(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUniverseTypesTypeId', function() {
        it('should call getUniverseTypesTypeId successfully', function(done) {
          // TODO: uncomment, update parameter values for getUniverseTypesTypeId call and complete the assertions
          /*
          var type_id = 56;
          var opts = {};
          opts.Accept_Language = "en";
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.language = "en";

          instance.getUniverseTypesTypeId(type_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetUniverseTypesTypeIdOk);
            expect(data.capacity).to.be.a('number');
            expect(data.capacity).to.be(0.0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.dogma_attributes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.GetUniverseTypesTypeIdDogmaAttribute);
                expect(data.attribute_id).to.be.a('number');
                expect(data.attribute_id).to.be(0);
                expect(data.value).to.be.a('number');
                expect(data.value).to.be(0.0);

                      }
            }
            {
              let dataCtr = data.dogma_effects;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.GetUniverseTypesTypeIdDogmaEffect);
                expect(data.effect_id).to.be.a('number');
                expect(data.effect_id).to.be(0);
                expect(data.is_default).to.be.a('boolean');
                expect(data.is_default).to.be(false);

                      }
            }
            expect(data.graphic_id).to.be.a('number');
            expect(data.graphic_id).to.be(0);
            expect(data.group_id).to.be.a('number');
            expect(data.group_id).to.be(0);
            expect(data.icon_id).to.be.a('number');
            expect(data.icon_id).to.be(0);
            expect(data.market_group_id).to.be.a('number');
            expect(data.market_group_id).to.be(0);
            expect(data.mass).to.be.a('number');
            expect(data.mass).to.be(0.0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.packaged_volume).to.be.a('number');
            expect(data.packaged_volume).to.be(0.0);
            expect(data.portion_size).to.be.a('number');
            expect(data.portion_size).to.be(0);
            expect(data.published).to.be.a('boolean');
            expect(data.published).to.be(false);
            expect(data.radius).to.be.a('number');
            expect(data.radius).to.be(0.0);
            expect(data.type_id).to.be.a('number');
            expect(data.type_id).to.be(0);
            expect(data.volume).to.be.a('number');
            expect(data.volume).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postUniverseIds', function() {
        it('should call postUniverseIds successfully', function(done) {
          // TODO: uncomment, update parameter values for postUniverseIds call and complete the assertions
          /*
          var names = [new EveApi.[String]()];
          var opts = {};
          opts.Accept_Language = "en";
          opts.datasource = "tranquility";
          opts.language = "en";

          instance.postUniverseIds(names, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.PostUniverseIdsOk);
            {
              let dataCtr = data.agents;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.PostUniverseIdsAgent);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            {
              let dataCtr = data.alliances;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.PostUniverseIdsAlliance);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            {
              let dataCtr = data.characters;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.PostUniverseIdsCharacter);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            {
              let dataCtr = data.constellations;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.PostUniverseIdsConstellation);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            {
              let dataCtr = data.corporations;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.PostUniverseIdsCorporation);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            {
              let dataCtr = data.factions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.PostUniverseIdsFaction);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            {
              let dataCtr = data.inventory_types;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.PostUniverseIdsInventoryType);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            {
              let dataCtr = data.regions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.PostUniverseIdsRegion);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            {
              let dataCtr = data.stations;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.PostUniverseIdsStation);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            {
              let dataCtr = data.systems;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.PostUniverseIdsSystem);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postUniverseNames', function() {
        it('should call postUniverseNames successfully', function(done) {
          // TODO: uncomment, update parameter values for postUniverseNames call and complete the assertions
          /*
          var ids = [new EveApi.[Number]()];
          var opts = {};
          opts.datasource = "tranquility";

          instance.postUniverseNames(ids, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.PostUniverseNames200Ok);
              expect(data.category).to.be.a('string');
              expect(data.category).to.be("alliance");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
