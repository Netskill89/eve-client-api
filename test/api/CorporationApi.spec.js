/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveApi);
  }
}(this, function(expect, EveApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EveApi.CorporationApi();
  });

  describe('(package)', function() {
    describe('CorporationApi', function() {
      describe('getCorporationsCorporationId', function() {
        it('should call getCorporationsCorporationId successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationId call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getCorporationsCorporationId(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetCorporationsCorporationIdOk);
            expect(data.alliance_id).to.be.a('number');
            expect(data.alliance_id).to.be(0);
            expect(data.ceo_id).to.be.a('number');
            expect(data.ceo_id).to.be(0);
            expect(data.creator_id).to.be.a('number');
            expect(data.creator_id).to.be(0);
            expect(data.date_founded).to.be.a(Date);
            expect(data.date_founded).to.be(new Date());
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.faction_id).to.be.a('number');
            expect(data.faction_id).to.be(0);
            expect(data.home_station_id).to.be.a('number');
            expect(data.home_station_id).to.be(0);
            expect(data.member_count).to.be.a('number');
            expect(data.member_count).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.shares).to.be.a('number');
            expect(data.shares).to.be("0");
            expect(data.tax_rate).to.be.a('number');
            expect(data.tax_rate).to.be(0.0);
            expect(data.ticker).to.be.a('string');
            expect(data.ticker).to.be("");
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("");
            expect(data.war_eligible).to.be.a('boolean');
            expect(data.war_eligible).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdAlliancehistory', function() {
        it('should call getCorporationsCorporationIdAlliancehistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdAlliancehistory call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getCorporationsCorporationIdAlliancehistory(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdAlliancehistory200Ok);
              expect(data.alliance_id).to.be.a('number');
              expect(data.alliance_id).to.be(0);
              expect(data.is_deleted).to.be.a('boolean');
              expect(data.is_deleted).to.be(false);
              expect(data.record_id).to.be.a('number');
              expect(data.record_id).to.be(0);
              expect(data.start_date).to.be.a(Date);
              expect(data.start_date).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdBlueprints', function() {
        it('should call getCorporationsCorporationIdBlueprints successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdBlueprints call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdBlueprints(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdBlueprints200Ok);
              expect(data.item_id).to.be.a('number');
              expect(data.item_id).to.be("0");
              expect(data.location_flag).to.be.a('string');
              expect(data.location_flag).to.be("AssetSafety");
              expect(data.location_id).to.be.a('number');
              expect(data.location_id).to.be("0");
              expect(data.material_efficiency).to.be.a('number');
              expect(data.material_efficiency).to.be(0);
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0);
              expect(data.runs).to.be.a('number');
              expect(data.runs).to.be(0);
              expect(data.time_efficiency).to.be.a('number');
              expect(data.time_efficiency).to.be(0);
              expect(data.type_id).to.be.a('number');
              expect(data.type_id).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdContainersLogs', function() {
        it('should call getCorporationsCorporationIdContainersLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdContainersLogs call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdContainersLogs(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdContainersLogs200Ok);
              expect(data.action).to.be.a('string');
              expect(data.action).to.be("add");
              expect(data.character_id).to.be.a('number');
              expect(data.character_id).to.be(0);
              expect(data.container_id).to.be.a('number');
              expect(data.container_id).to.be("0");
              expect(data.container_type_id).to.be.a('number');
              expect(data.container_type_id).to.be(0);
              expect(data.location_flag).to.be.a('string');
              expect(data.location_flag).to.be("AssetSafety");
              expect(data.location_id).to.be.a('number');
              expect(data.location_id).to.be("0");
              expect(data.logged_at).to.be.a(Date);
              expect(data.logged_at).to.be(new Date());
              expect(data.new_config_bitmask).to.be.a('number');
              expect(data.new_config_bitmask).to.be(0);
              expect(data.old_config_bitmask).to.be.a('number');
              expect(data.old_config_bitmask).to.be(0);
              expect(data.password_type).to.be.a('string');
              expect(data.password_type).to.be("config");
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0);
              expect(data.type_id).to.be.a('number');
              expect(data.type_id).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdDivisions', function() {
        it('should call getCorporationsCorporationIdDivisions successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdDivisions call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdDivisions(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetCorporationsCorporationIdDivisionsOk);
            {
              let dataCtr = data.hangar;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.GetCorporationsCorporationIdDivisionsHangarHangar);
                expect(data.division).to.be.a('number');
                expect(data.division).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            {
              let dataCtr = data.wallet;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.GetCorporationsCorporationIdDivisionsWalletWallet);
                expect(data.division).to.be.a('number');
                expect(data.division).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdFacilities', function() {
        it('should call getCorporationsCorporationIdFacilities successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdFacilities call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdFacilities(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdFacilities200Ok);
              expect(data.facility_id).to.be.a('number');
              expect(data.facility_id).to.be("0");
              expect(data.system_id).to.be.a('number');
              expect(data.system_id).to.be(0);
              expect(data.type_id).to.be.a('number');
              expect(data.type_id).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdIcons', function() {
        it('should call getCorporationsCorporationIdIcons successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdIcons call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getCorporationsCorporationIdIcons(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetCorporationsCorporationIdIconsOk);
            expect(data.px128x128).to.be.a('string');
            expect(data.px128x128).to.be("");
            expect(data.px256x256).to.be.a('string');
            expect(data.px256x256).to.be("");
            expect(data.px64x64).to.be.a('string');
            expect(data.px64x64).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdMedals', function() {
        it('should call getCorporationsCorporationIdMedals successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdMedals call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdMedals(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdMedals200Ok);
              expect(data.created_at).to.be.a(Date);
              expect(data.created_at).to.be(new Date());
              expect(data.creator_id).to.be.a('number');
              expect(data.creator_id).to.be(0);
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.medal_id).to.be.a('number');
              expect(data.medal_id).to.be(0);
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdMedalsIssued', function() {
        it('should call getCorporationsCorporationIdMedalsIssued successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdMedalsIssued call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdMedalsIssued(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdMedalsIssued200Ok);
              expect(data.character_id).to.be.a('number');
              expect(data.character_id).to.be(0);
              expect(data.issued_at).to.be.a(Date);
              expect(data.issued_at).to.be(new Date());
              expect(data.issuer_id).to.be.a('number');
              expect(data.issuer_id).to.be(0);
              expect(data.medal_id).to.be.a('number');
              expect(data.medal_id).to.be(0);
              expect(data.reason).to.be.a('string');
              expect(data.reason).to.be("");
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("private");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdMembers', function() {
        it('should call getCorporationsCorporationIdMembers successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdMembers call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdMembers(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdMembersLimit', function() {
        it('should call getCorporationsCorporationIdMembersLimit successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdMembersLimit call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdMembersLimit(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('number');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdMembersTitles', function() {
        it('should call getCorporationsCorporationIdMembersTitles successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdMembersTitles call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdMembersTitles(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdMembersTitles200Ok);
              expect(data.character_id).to.be.a('number');
              expect(data.character_id).to.be(0);
              {
                let dataCtr = data.titles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdMembertracking', function() {
        it('should call getCorporationsCorporationIdMembertracking successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdMembertracking call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdMembertracking(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdMembertracking200Ok);
              expect(data.base_id).to.be.a('number');
              expect(data.base_id).to.be(0);
              expect(data.character_id).to.be.a('number');
              expect(data.character_id).to.be(0);
              expect(data.location_id).to.be.a('number');
              expect(data.location_id).to.be("0");
              expect(data.logoff_date).to.be.a(Date);
              expect(data.logoff_date).to.be(new Date());
              expect(data.logon_date).to.be.a(Date);
              expect(data.logon_date).to.be(new Date());
              expect(data.ship_type_id).to.be.a('number');
              expect(data.ship_type_id).to.be(0);
              expect(data.start_date).to.be.a(Date);
              expect(data.start_date).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdRoles', function() {
        it('should call getCorporationsCorporationIdRoles successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdRoles call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdRoles(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdRoles200Ok);
              expect(data.character_id).to.be.a('number');
              expect(data.character_id).to.be(0);
              {
                let dataCtr = data.grantable_roles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.grantable_roles_at_base;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.grantable_roles_at_hq;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.grantable_roles_at_other;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.roles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.roles_at_base;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.roles_at_hq;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.roles_at_other;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdRolesHistory', function() {
        it('should call getCorporationsCorporationIdRolesHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdRolesHistory call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdRolesHistory(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdRolesHistory200Ok);
              expect(data.changed_at).to.be.a(Date);
              expect(data.changed_at).to.be(new Date());
              expect(data.character_id).to.be.a('number');
              expect(data.character_id).to.be(0);
              expect(data.issuer_id).to.be.a('number');
              expect(data.issuer_id).to.be(0);
              {
                let dataCtr = data.new_roles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.old_roles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              expect(data.role_type).to.be.a('string');
              expect(data.role_type).to.be("grantable_roles");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdShareholders', function() {
        it('should call getCorporationsCorporationIdShareholders successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdShareholders call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdShareholders(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdShareholders200Ok);
              expect(data.share_count).to.be.a('number');
              expect(data.share_count).to.be("0");
              expect(data.shareholder_id).to.be.a('number');
              expect(data.shareholder_id).to.be(0);
              expect(data.shareholder_type).to.be.a('string');
              expect(data.shareholder_type).to.be("character");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdStandings', function() {
        it('should call getCorporationsCorporationIdStandings successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdStandings call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdStandings(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdStandings200Ok);
              expect(data.from_id).to.be.a('number');
              expect(data.from_id).to.be(0);
              expect(data.from_type).to.be.a('string');
              expect(data.from_type).to.be("agent");
              expect(data.standing).to.be.a('number');
              expect(data.standing).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdStarbases', function() {
        it('should call getCorporationsCorporationIdStarbases successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdStarbases call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdStarbases(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdStarbases200Ok);
              expect(data.moon_id).to.be.a('number');
              expect(data.moon_id).to.be(0);
              expect(data.onlined_since).to.be.a(Date);
              expect(data.onlined_since).to.be(new Date());
              expect(data.reinforced_until).to.be.a(Date);
              expect(data.reinforced_until).to.be(new Date());
              expect(data.starbase_id).to.be.a('number');
              expect(data.starbase_id).to.be("0");
              expect(data.state).to.be.a('string');
              expect(data.state).to.be("offline");
              expect(data.system_id).to.be.a('number');
              expect(data.system_id).to.be(0);
              expect(data.type_id).to.be.a('number');
              expect(data.type_id).to.be(0);
              expect(data.unanchor_at).to.be.a(Date);
              expect(data.unanchor_at).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdStarbasesStarbaseId', function() {
        it('should call getCorporationsCorporationIdStarbasesStarbaseId successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdStarbasesStarbaseId call and complete the assertions
          /*
          var corporation_id = 56;
          var starbase_id = 789;
          var system_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdStarbasesStarbaseId(corporation_id, starbase_id, system_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetCorporationsCorporationIdStarbasesStarbaseIdOk);
            expect(data.allow_alliance_members).to.be.a('boolean');
            expect(data.allow_alliance_members).to.be(false);
            expect(data.allow_corporation_members).to.be.a('boolean');
            expect(data.allow_corporation_members).to.be(false);
            expect(data.anchor).to.be.a('string');
            expect(data.anchor).to.be("alliance_member");
            expect(data.attack_if_at_war).to.be.a('boolean');
            expect(data.attack_if_at_war).to.be(false);
            expect(data.attack_if_other_security_status_dropping).to.be.a('boolean');
            expect(data.attack_if_other_security_status_dropping).to.be(false);
            expect(data.attack_security_status_threshold).to.be.a('number');
            expect(data.attack_security_status_threshold).to.be(0.0);
            expect(data.attack_standing_threshold).to.be.a('number');
            expect(data.attack_standing_threshold).to.be(0.0);
            expect(data.fuel_bay_take).to.be.a('string');
            expect(data.fuel_bay_take).to.be("alliance_member");
            expect(data.fuel_bay_view).to.be.a('string');
            expect(data.fuel_bay_view).to.be("alliance_member");
            {
              let dataCtr = data.fuels;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.GetCorporationsCorporationIdStarbasesStarbaseIdFuel);
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0);
                expect(data.type_id).to.be.a('number');
                expect(data.type_id).to.be(0);

                      }
            }
            expect(data.offline).to.be.a('string');
            expect(data.offline).to.be("alliance_member");
            expect(data.online).to.be.a('string');
            expect(data.online).to.be("alliance_member");
            expect(data.unanchor).to.be.a('string');
            expect(data.unanchor).to.be("alliance_member");
            expect(data.use_alliance_standings).to.be.a('boolean');
            expect(data.use_alliance_standings).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdStructures', function() {
        it('should call getCorporationsCorporationIdStructures successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdStructures call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.Accept_Language = "en";
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.language = "en";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdStructures(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdStructures200Ok);
              expect(data.corporation_id).to.be.a('number');
              expect(data.corporation_id).to.be(0);
              expect(data.fuel_expires).to.be.a(Date);
              expect(data.fuel_expires).to.be(new Date());
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.next_reinforce_apply).to.be.a(Date);
              expect(data.next_reinforce_apply).to.be(new Date());
              expect(data.next_reinforce_hour).to.be.a('number');
              expect(data.next_reinforce_hour).to.be(0);
              expect(data.profile_id).to.be.a('number');
              expect(data.profile_id).to.be(0);
              expect(data.reinforce_hour).to.be.a('number');
              expect(data.reinforce_hour).to.be(0);
              {
                let dataCtr = data.services;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetCorporationsCorporationIdStructuresService);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.state).to.be.a('string');
                  expect(data.state).to.be("online");
  
                        }
              }
              expect(data.state).to.be.a('string');
              expect(data.state).to.be("anchor_vulnerable");
              expect(data.state_timer_end).to.be.a(Date);
              expect(data.state_timer_end).to.be(new Date());
              expect(data.state_timer_start).to.be.a(Date);
              expect(data.state_timer_start).to.be(new Date());
              expect(data.structure_id).to.be.a('number');
              expect(data.structure_id).to.be("0");
              expect(data.system_id).to.be.a('number');
              expect(data.system_id).to.be(0);
              expect(data.type_id).to.be.a('number');
              expect(data.type_id).to.be(0);
              expect(data.unanchors_at).to.be.a(Date);
              expect(data.unanchors_at).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdTitles', function() {
        it('should call getCorporationsCorporationIdTitles successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdTitles call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdTitles(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdTitles200Ok);
              {
                let dataCtr = data.grantable_roles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.grantable_roles_at_base;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.grantable_roles_at_hq;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.grantable_roles_at_other;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              {
                let dataCtr = data.roles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.roles_at_base;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.roles_at_hq;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.roles_at_other;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              expect(data.title_id).to.be.a('number');
              expect(data.title_id).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsNpccorps', function() {
        it('should call getCorporationsNpccorps successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsNpccorps call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getCorporationsNpccorps(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
