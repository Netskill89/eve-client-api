/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveApi);
  }
}(this, function(expect, EveApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EveApi.FleetsApi();
  });

  describe('(package)', function() {
    describe('FleetsApi', function() {
      describe('deleteFleetsFleetIdMembersMemberId', function() {
        it('should call deleteFleetsFleetIdMembersMemberId successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteFleetsFleetIdMembersMemberId call
          /*
          var fleet_id = 789;
          var member_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.token = "token_example";

          instance.deleteFleetsFleetIdMembersMemberId(fleet_id, member_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteFleetsFleetIdSquadsSquadId', function() {
        it('should call deleteFleetsFleetIdSquadsSquadId successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteFleetsFleetIdSquadsSquadId call
          /*
          var fleet_id = 789;
          var squad_id = 789;
          var opts = {};
          opts.datasource = "tranquility";
          opts.token = "token_example";

          instance.deleteFleetsFleetIdSquadsSquadId(fleet_id, squad_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteFleetsFleetIdWingsWingId', function() {
        it('should call deleteFleetsFleetIdWingsWingId successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteFleetsFleetIdWingsWingId call
          /*
          var fleet_id = 789;
          var wing_id = 789;
          var opts = {};
          opts.datasource = "tranquility";
          opts.token = "token_example";

          instance.deleteFleetsFleetIdWingsWingId(fleet_id, wing_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdFleet', function() {
        it('should call getCharactersCharacterIdFleet successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdFleet call and complete the assertions
          /*
          var character_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCharactersCharacterIdFleet(character_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetCharactersCharacterIdFleetOk);
            expect(data.fleet_id).to.be.a('number');
            expect(data.fleet_id).to.be("0");
            expect(data.role).to.be.a('string');
            expect(data.role).to.be("fleet_commander");
            expect(data.squad_id).to.be.a('number');
            expect(data.squad_id).to.be("0");
            expect(data.wing_id).to.be.a('number');
            expect(data.wing_id).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFleetsFleetId', function() {
        it('should call getFleetsFleetId successfully', function(done) {
          // TODO: uncomment, update parameter values for getFleetsFleetId call and complete the assertions
          /*
          var fleet_id = 789;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getFleetsFleetId(fleet_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetFleetsFleetIdOk);
            expect(data.is_free_move).to.be.a('boolean');
            expect(data.is_free_move).to.be(false);
            expect(data.is_registered).to.be.a('boolean');
            expect(data.is_registered).to.be(false);
            expect(data.is_voice_enabled).to.be.a('boolean');
            expect(data.is_voice_enabled).to.be(false);
            expect(data.motd).to.be.a('string');
            expect(data.motd).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFleetsFleetIdMembers', function() {
        it('should call getFleetsFleetIdMembers successfully', function(done) {
          // TODO: uncomment, update parameter values for getFleetsFleetIdMembers call and complete the assertions
          /*
          var fleet_id = 789;
          var opts = {};
          opts.Accept_Language = "en";
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.language = "en";
          opts.token = "token_example";

          instance.getFleetsFleetIdMembers(fleet_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetFleetsFleetIdMembers200Ok);
              expect(data.character_id).to.be.a('number');
              expect(data.character_id).to.be(0);
              expect(data.join_time).to.be.a(Date);
              expect(data.join_time).to.be(new Date());
              expect(data.role).to.be.a('string');
              expect(data.role).to.be("fleet_commander");
              expect(data.role_name).to.be.a('string');
              expect(data.role_name).to.be("");
              expect(data.ship_type_id).to.be.a('number');
              expect(data.ship_type_id).to.be(0);
              expect(data.solar_system_id).to.be.a('number');
              expect(data.solar_system_id).to.be(0);
              expect(data.squad_id).to.be.a('number');
              expect(data.squad_id).to.be("0");
              expect(data.station_id).to.be.a('number');
              expect(data.station_id).to.be("0");
              expect(data.takes_fleet_warp).to.be.a('boolean');
              expect(data.takes_fleet_warp).to.be(false);
              expect(data.wing_id).to.be.a('number');
              expect(data.wing_id).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFleetsFleetIdWings', function() {
        it('should call getFleetsFleetIdWings successfully', function(done) {
          // TODO: uncomment, update parameter values for getFleetsFleetIdWings call and complete the assertions
          /*
          var fleet_id = 789;
          var opts = {};
          opts.Accept_Language = "en";
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.language = "en";
          opts.token = "token_example";

          instance.getFleetsFleetIdWings(fleet_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetFleetsFleetIdWings200Ok);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              {
                let dataCtr = data.squads;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetFleetsFleetIdWingsSquad);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postFleetsFleetIdMembers', function() {
        it('should call postFleetsFleetIdMembers successfully', function(done) {
          // TODO: uncomment, update parameter values for postFleetsFleetIdMembers call
          /*
          var fleet_id = 789;
          var invitation = new EveApi.PostFleetsFleetIdMembersInvitation();
          invitation.character_id = 0;
          invitation.role = "fleet_commander";
          invitation.squad_id = "0";
          invitation.wing_id = "0";
          var opts = {};
          opts.datasource = "tranquility";
          opts.token = "token_example";

          instance.postFleetsFleetIdMembers(fleet_id, invitation, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postFleetsFleetIdWings', function() {
        it('should call postFleetsFleetIdWings successfully', function(done) {
          // TODO: uncomment, update parameter values for postFleetsFleetIdWings call and complete the assertions
          /*
          var fleet_id = 789;
          var opts = {};
          opts.datasource = "tranquility";
          opts.token = "token_example";

          instance.postFleetsFleetIdWings(fleet_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.PostFleetsFleetIdWingsCreated);
            expect(data.wing_id).to.be.a('number');
            expect(data.wing_id).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postFleetsFleetIdWingsWingIdSquads', function() {
        it('should call postFleetsFleetIdWingsWingIdSquads successfully', function(done) {
          // TODO: uncomment, update parameter values for postFleetsFleetIdWingsWingIdSquads call and complete the assertions
          /*
          var fleet_id = 789;
          var wing_id = 789;
          var opts = {};
          opts.datasource = "tranquility";
          opts.token = "token_example";

          instance.postFleetsFleetIdWingsWingIdSquads(fleet_id, wing_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.PostFleetsFleetIdWingsWingIdSquadsCreated);
            expect(data.squad_id).to.be.a('number');
            expect(data.squad_id).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putFleetsFleetId', function() {
        it('should call putFleetsFleetId successfully', function(done) {
          // TODO: uncomment, update parameter values for putFleetsFleetId call
          /*
          var fleet_id = 789;
          var new_settings = new EveApi.PutFleetsFleetIdNewSettings();
          new_settings.is_free_move = false;
          new_settings.motd = "";
          var opts = {};
          opts.datasource = "tranquility";
          opts.token = "token_example";

          instance.putFleetsFleetId(fleet_id, new_settings, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putFleetsFleetIdMembersMemberId', function() {
        it('should call putFleetsFleetIdMembersMemberId successfully', function(done) {
          // TODO: uncomment, update parameter values for putFleetsFleetIdMembersMemberId call
          /*
          var fleet_id = 789;
          var member_id = 56;
          var movement = new EveApi.PutFleetsFleetIdMembersMemberIdMovement();
          movement.role = "fleet_commander";
          movement.squad_id = "0";
          movement.wing_id = "0";
          var opts = {};
          opts.datasource = "tranquility";
          opts.token = "token_example";

          instance.putFleetsFleetIdMembersMemberId(fleet_id, member_id, movement, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putFleetsFleetIdSquadsSquadId', function() {
        it('should call putFleetsFleetIdSquadsSquadId successfully', function(done) {
          // TODO: uncomment, update parameter values for putFleetsFleetIdSquadsSquadId call
          /*
          var fleet_id = 789;
          var naming = new EveApi.PutFleetsFleetIdSquadsSquadIdNaming();
          naming.name = "";
          var squad_id = 789;
          var opts = {};
          opts.datasource = "tranquility";
          opts.token = "token_example";

          instance.putFleetsFleetIdSquadsSquadId(fleet_id, naming, squad_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putFleetsFleetIdWingsWingId', function() {
        it('should call putFleetsFleetIdWingsWingId successfully', function(done) {
          // TODO: uncomment, update parameter values for putFleetsFleetIdWingsWingId call
          /*
          var fleet_id = 789;
          var naming = new EveApi.PutFleetsFleetIdWingsWingIdNaming();
          naming.name = "";
          var wing_id = 789;
          var opts = {};
          opts.datasource = "tranquility";
          opts.token = "token_example";

          instance.putFleetsFleetIdWingsWingId(fleet_id, naming, wing_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
