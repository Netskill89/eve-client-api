/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveApi);
  }
}(this, function(expect, EveApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EveApi.AssetsApi();
  });

  describe('(package)', function() {
    describe('AssetsApi', function() {
      describe('getCharactersCharacterIdAssets', function() {
        it('should call getCharactersCharacterIdAssets successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdAssets call and complete the assertions
          /*
          var character_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCharactersCharacterIdAssets(character_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCharactersCharacterIdAssets200Ok);
              expect(data.is_blueprint_copy).to.be.a('boolean');
              expect(data.is_blueprint_copy).to.be(false);
              expect(data.is_singleton).to.be.a('boolean');
              expect(data.is_singleton).to.be(false);
              expect(data.item_id).to.be.a('number');
              expect(data.item_id).to.be("0");
              expect(data.location_flag).to.be.a('string');
              expect(data.location_flag).to.be("AssetSafety");
              expect(data.location_id).to.be.a('number');
              expect(data.location_id).to.be("0");
              expect(data.location_type).to.be.a('string');
              expect(data.location_type).to.be("station");
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0);
              expect(data.type_id).to.be.a('number');
              expect(data.type_id).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdAssets', function() {
        it('should call getCorporationsCorporationIdAssets successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdAssets call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdAssets(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdAssets200Ok);
              expect(data.is_blueprint_copy).to.be.a('boolean');
              expect(data.is_blueprint_copy).to.be(false);
              expect(data.is_singleton).to.be.a('boolean');
              expect(data.is_singleton).to.be(false);
              expect(data.item_id).to.be.a('number');
              expect(data.item_id).to.be("0");
              expect(data.location_flag).to.be.a('string');
              expect(data.location_flag).to.be("AssetSafety");
              expect(data.location_id).to.be.a('number');
              expect(data.location_id).to.be("0");
              expect(data.location_type).to.be.a('string');
              expect(data.location_type).to.be("station");
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0);
              expect(data.type_id).to.be.a('number');
              expect(data.type_id).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postCharactersCharacterIdAssetsLocations', function() {
        it('should call postCharactersCharacterIdAssetsLocations successfully', function(done) {
          // TODO: uncomment, update parameter values for postCharactersCharacterIdAssetsLocations call and complete the assertions
          /*
          var character_id = 56;
          var item_ids = [new EveApi.[Number]()];
          var opts = {};
          opts.datasource = "tranquility";
          opts.token = "token_example";

          instance.postCharactersCharacterIdAssetsLocations(character_id, item_ids, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.PostCharactersCharacterIdAssetsLocations200Ok);
              expect(data.item_id).to.be.a('number');
              expect(data.item_id).to.be("0");
              expect(data.position).to.be.a(EveApi.PostCharactersCharacterIdAssetsLocationsPosition);
                    expect(data.position.x).to.be.a('number');
                expect(data.position.x).to.be(0.0);
                expect(data.position.y).to.be.a('number');
                expect(data.position.y).to.be(0.0);
                expect(data.position.z).to.be.a('number');
                expect(data.position.z).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postCharactersCharacterIdAssetsNames', function() {
        it('should call postCharactersCharacterIdAssetsNames successfully', function(done) {
          // TODO: uncomment, update parameter values for postCharactersCharacterIdAssetsNames call and complete the assertions
          /*
          var character_id = 56;
          var item_ids = [new EveApi.[Number]()];
          var opts = {};
          opts.datasource = "tranquility";
          opts.token = "token_example";

          instance.postCharactersCharacterIdAssetsNames(character_id, item_ids, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.PostCharactersCharacterIdAssetsNames200Ok);
              expect(data.item_id).to.be.a('number');
              expect(data.item_id).to.be("0");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postCorporationsCorporationIdAssetsLocations', function() {
        it('should call postCorporationsCorporationIdAssetsLocations successfully', function(done) {
          // TODO: uncomment, update parameter values for postCorporationsCorporationIdAssetsLocations call and complete the assertions
          /*
          var corporation_id = 56;
          var item_ids = [new EveApi.[Number]()];
          var opts = {};
          opts.datasource = "tranquility";
          opts.token = "token_example";

          instance.postCorporationsCorporationIdAssetsLocations(corporation_id, item_ids, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.PostCorporationsCorporationIdAssetsLocations200Ok);
              expect(data.item_id).to.be.a('number');
              expect(data.item_id).to.be("0");
              expect(data.position).to.be.a(EveApi.PostCorporationsCorporationIdAssetsLocationsPosition);
                    expect(data.position.x).to.be.a('number');
                expect(data.position.x).to.be(0.0);
                expect(data.position.y).to.be.a('number');
                expect(data.position.y).to.be(0.0);
                expect(data.position.z).to.be.a('number');
                expect(data.position.z).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postCorporationsCorporationIdAssetsNames', function() {
        it('should call postCorporationsCorporationIdAssetsNames successfully', function(done) {
          // TODO: uncomment, update parameter values for postCorporationsCorporationIdAssetsNames call and complete the assertions
          /*
          var corporation_id = 56;
          var item_ids = [new EveApi.[Number]()];
          var opts = {};
          opts.datasource = "tranquility";
          opts.token = "token_example";

          instance.postCorporationsCorporationIdAssetsNames(corporation_id, item_ids, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.PostCorporationsCorporationIdAssetsNames200Ok);
              expect(data.item_id).to.be.a('number');
              expect(data.item_id).to.be("0");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
