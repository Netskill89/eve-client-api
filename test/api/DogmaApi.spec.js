/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveApi);
  }
}(this, function(expect, EveApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EveApi.DogmaApi();
  });

  describe('(package)', function() {
    describe('DogmaApi', function() {
      describe('getDogmaAttributes', function() {
        it('should call getDogmaAttributes successfully', function(done) {
          // TODO: uncomment, update parameter values for getDogmaAttributes call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getDogmaAttributes(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDogmaAttributesAttributeId', function() {
        it('should call getDogmaAttributesAttributeId successfully', function(done) {
          // TODO: uncomment, update parameter values for getDogmaAttributesAttributeId call and complete the assertions
          /*
          var attribute_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getDogmaAttributesAttributeId(attribute_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetDogmaAttributesAttributeIdOk);
            expect(data.attribute_id).to.be.a('number');
            expect(data.attribute_id).to.be(0);
            expect(data.default_value).to.be.a('number');
            expect(data.default_value).to.be(0.0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.display_name).to.be.a('string');
            expect(data.display_name).to.be("");
            expect(data.high_is_good).to.be.a('boolean');
            expect(data.high_is_good).to.be(false);
            expect(data.icon_id).to.be.a('number');
            expect(data.icon_id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.published).to.be.a('boolean');
            expect(data.published).to.be(false);
            expect(data.stackable).to.be.a('boolean');
            expect(data.stackable).to.be(false);
            expect(data.unit_id).to.be.a('number');
            expect(data.unit_id).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDogmaDynamicItemsTypeIdItemId', function() {
        it('should call getDogmaDynamicItemsTypeIdItemId successfully', function(done) {
          // TODO: uncomment, update parameter values for getDogmaDynamicItemsTypeIdItemId call and complete the assertions
          /*
          var item_id = 789;
          var type_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getDogmaDynamicItemsTypeIdItemId(item_id, type_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetDogmaDynamicItemsTypeIdItemIdOk);
            expect(data.created_by).to.be.a('number');
            expect(data.created_by).to.be(0);
            {
              let dataCtr = data.dogma_attributes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.GetDogmaDynamicItemsTypeIdItemIdDogmaAttribute);
                expect(data.attribute_id).to.be.a('number');
                expect(data.attribute_id).to.be(0);
                expect(data.value).to.be.a('number');
                expect(data.value).to.be(0.0);

                      }
            }
            {
              let dataCtr = data.dogma_effects;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.GetDogmaDynamicItemsTypeIdItemIdDogmaEffect);
                expect(data.effect_id).to.be.a('number');
                expect(data.effect_id).to.be(0);
                expect(data.is_default).to.be.a('boolean');
                expect(data.is_default).to.be(false);

                      }
            }
            expect(data.mutator_type_id).to.be.a('number');
            expect(data.mutator_type_id).to.be(0);
            expect(data.source_type_id).to.be.a('number');
            expect(data.source_type_id).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDogmaEffects', function() {
        it('should call getDogmaEffects successfully', function(done) {
          // TODO: uncomment, update parameter values for getDogmaEffects call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getDogmaEffects(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDogmaEffectsEffectId', function() {
        it('should call getDogmaEffectsEffectId successfully', function(done) {
          // TODO: uncomment, update parameter values for getDogmaEffectsEffectId call and complete the assertions
          /*
          var effect_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getDogmaEffectsEffectId(effect_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetDogmaEffectsEffectIdOk);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.disallow_auto_repeat).to.be.a('boolean');
            expect(data.disallow_auto_repeat).to.be(false);
            expect(data.discharge_attribute_id).to.be.a('number');
            expect(data.discharge_attribute_id).to.be(0);
            expect(data.display_name).to.be.a('string');
            expect(data.display_name).to.be("");
            expect(data.duration_attribute_id).to.be.a('number');
            expect(data.duration_attribute_id).to.be(0);
            expect(data.effect_category).to.be.a('number');
            expect(data.effect_category).to.be(0);
            expect(data.effect_id).to.be.a('number');
            expect(data.effect_id).to.be(0);
            expect(data.electronic_chance).to.be.a('boolean');
            expect(data.electronic_chance).to.be(false);
            expect(data.falloff_attribute_id).to.be.a('number');
            expect(data.falloff_attribute_id).to.be(0);
            expect(data.icon_id).to.be.a('number');
            expect(data.icon_id).to.be(0);
            expect(data.is_assistance).to.be.a('boolean');
            expect(data.is_assistance).to.be(false);
            expect(data.is_offensive).to.be.a('boolean');
            expect(data.is_offensive).to.be(false);
            expect(data.is_warp_safe).to.be.a('boolean');
            expect(data.is_warp_safe).to.be(false);
            {
              let dataCtr = data.modifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.GetDogmaEffectsEffectIdModifier);
                expect(data.domain).to.be.a('string');
                expect(data.domain).to.be("");
                expect(data.effect_id).to.be.a('number');
                expect(data.effect_id).to.be(0);
                expect(data.func).to.be.a('string');
                expect(data.func).to.be("");
                expect(data.modified_attribute_id).to.be.a('number');
                expect(data.modified_attribute_id).to.be(0);
                expect(data.modifying_attribute_id).to.be.a('number');
                expect(data.modifying_attribute_id).to.be(0);
                expect(data.operator).to.be.a('number');
                expect(data.operator).to.be(0);

                      }
            }
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.post_expression).to.be.a('number');
            expect(data.post_expression).to.be(0);
            expect(data.pre_expression).to.be.a('number');
            expect(data.pre_expression).to.be(0);
            expect(data.published).to.be.a('boolean');
            expect(data.published).to.be(false);
            expect(data.range_attribute_id).to.be.a('number');
            expect(data.range_attribute_id).to.be(0);
            expect(data.range_chance).to.be.a('boolean');
            expect(data.range_chance).to.be(false);
            expect(data.tracking_speed_attribute_id).to.be.a('number');
            expect(data.tracking_speed_attribute_id).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
