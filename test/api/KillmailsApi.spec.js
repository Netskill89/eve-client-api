/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveApi);
  }
}(this, function(expect, EveApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EveApi.KillmailsApi();
  });

  describe('(package)', function() {
    describe('KillmailsApi', function() {
      describe('getCharactersCharacterIdKillmailsRecent', function() {
        it('should call getCharactersCharacterIdKillmailsRecent successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdKillmailsRecent call and complete the assertions
          /*
          var character_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCharactersCharacterIdKillmailsRecent(character_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCharactersCharacterIdKillmailsRecent200Ok);
              expect(data.killmail_hash).to.be.a('string');
              expect(data.killmail_hash).to.be("");
              expect(data.killmail_id).to.be.a('number');
              expect(data.killmail_id).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdKillmailsRecent', function() {
        it('should call getCorporationsCorporationIdKillmailsRecent successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdKillmailsRecent call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdKillmailsRecent(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdKillmailsRecent200Ok);
              expect(data.killmail_hash).to.be.a('string');
              expect(data.killmail_hash).to.be("");
              expect(data.killmail_id).to.be.a('number');
              expect(data.killmail_id).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getKillmailsKillmailIdKillmailHash', function() {
        it('should call getKillmailsKillmailIdKillmailHash successfully', function(done) {
          // TODO: uncomment, update parameter values for getKillmailsKillmailIdKillmailHash call and complete the assertions
          /*
          var killmail_hash = "killmail_hash_example";
          var killmail_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";

          instance.getKillmailsKillmailIdKillmailHash(killmail_hash, killmail_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveApi.GetKillmailsKillmailIdKillmailHashOk);
            {
              let dataCtr = data.attackers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveApi.GetKillmailsKillmailIdKillmailHashAttacker);
                expect(data.alliance_id).to.be.a('number');
                expect(data.alliance_id).to.be(0);
                expect(data.character_id).to.be.a('number');
                expect(data.character_id).to.be(0);
                expect(data.corporation_id).to.be.a('number');
                expect(data.corporation_id).to.be(0);
                expect(data.damage_done).to.be.a('number');
                expect(data.damage_done).to.be(0);
                expect(data.faction_id).to.be.a('number');
                expect(data.faction_id).to.be(0);
                expect(data.final_blow).to.be.a('boolean');
                expect(data.final_blow).to.be(false);
                expect(data.security_status).to.be.a('number');
                expect(data.security_status).to.be(0.0);
                expect(data.ship_type_id).to.be.a('number');
                expect(data.ship_type_id).to.be(0);
                expect(data.weapon_type_id).to.be.a('number');
                expect(data.weapon_type_id).to.be(0);

                      }
            }
            expect(data.killmail_id).to.be.a('number');
            expect(data.killmail_id).to.be(0);
            expect(data.killmail_time).to.be.a(Date);
            expect(data.killmail_time).to.be(new Date());
            expect(data.moon_id).to.be.a('number');
            expect(data.moon_id).to.be(0);
            expect(data.solar_system_id).to.be.a('number');
            expect(data.solar_system_id).to.be(0);
            expect(data.victim).to.be.a(EveApi.GetKillmailsKillmailIdKillmailHashVictim);
                  expect(data.victim.alliance_id).to.be.a('number');
              expect(data.victim.alliance_id).to.be(0);
              expect(data.victim.character_id).to.be.a('number');
              expect(data.victim.character_id).to.be(0);
              expect(data.victim.corporation_id).to.be.a('number');
              expect(data.victim.corporation_id).to.be(0);
              expect(data.victim.damage_taken).to.be.a('number');
              expect(data.victim.damage_taken).to.be(0);
              expect(data.victim.faction_id).to.be.a('number');
              expect(data.victim.faction_id).to.be(0);
              {
                let dataCtr = data.victim.items;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveApi.GetKillmailsKillmailIdKillmailHashItem);
                  expect(data.flag).to.be.a('number');
                  expect(data.flag).to.be(0);
                  expect(data.item_type_id).to.be.a('number');
                  expect(data.item_type_id).to.be(0);
                  {
                    let dataCtr = data.items;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(EveApi.GetKillmailsKillmailIdKillmailHashItemsItem);
                      expect(data.flag).to.be.a('number');
                      expect(data.flag).to.be(0);
                      expect(data.item_type_id).to.be.a('number');
                      expect(data.item_type_id).to.be(0);
                      expect(data.quantity_destroyed).to.be.a('number');
                      expect(data.quantity_destroyed).to.be("0");
                      expect(data.quantity_dropped).to.be.a('number');
                      expect(data.quantity_dropped).to.be("0");
                      expect(data.singleton).to.be.a('number');
                      expect(data.singleton).to.be(0);
      
                            }
                  }
                  expect(data.quantity_destroyed).to.be.a('number');
                  expect(data.quantity_destroyed).to.be("0");
                  expect(data.quantity_dropped).to.be.a('number');
                  expect(data.quantity_dropped).to.be("0");
                  expect(data.singleton).to.be.a('number');
                  expect(data.singleton).to.be(0);
  
                        }
              }
              expect(data.victim.position).to.be.a(EveApi.GetKillmailsKillmailIdKillmailHashPosition);
                    expect(data.victim.position.x).to.be.a('number');
                expect(data.victim.position.x).to.be(0.0);
                expect(data.victim.position.y).to.be.a('number');
                expect(data.victim.position.y).to.be(0.0);
                expect(data.victim.position.z).to.be.a('number');
                expect(data.victim.position.z).to.be(0.0);
              expect(data.victim.ship_type_id).to.be.a('number');
              expect(data.victim.ship_type_id).to.be(0);
            expect(data.war_id).to.be.a('number');
            expect(data.war_id).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
