/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.12
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveApi);
  }
}(this, function(expect, EveApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EveApi.WalletApi();
  });

  describe('(package)', function() {
    describe('WalletApi', function() {
      describe('getCharactersCharacterIdWallet', function() {
        it('should call getCharactersCharacterIdWallet successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdWallet call and complete the assertions
          /*
          var character_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCharactersCharacterIdWallet(character_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('number');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdWalletJournal', function() {
        it('should call getCharactersCharacterIdWalletJournal successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdWalletJournal call and complete the assertions
          /*
          var character_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCharactersCharacterIdWalletJournal(character_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCharactersCharacterIdWalletJournal200Ok);
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.balance).to.be.a('number');
              expect(data.balance).to.be(0.0);
              expect(data.context_id).to.be.a('number');
              expect(data.context_id).to.be("0");
              expect(data.context_id_type).to.be.a('string');
              expect(data.context_id_type).to.be("structure_id");
              expect(data._date).to.be.a(Date);
              expect(data._date).to.be(new Date());
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.first_party_id).to.be.a('number');
              expect(data.first_party_id).to.be(0);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.reason).to.be.a('string');
              expect(data.reason).to.be("");
              expect(data.ref_type).to.be.a('string');
              expect(data.ref_type).to.be("acceleration_gate_fee");
              expect(data.second_party_id).to.be.a('number');
              expect(data.second_party_id).to.be(0);
              expect(data.tax).to.be.a('number');
              expect(data.tax).to.be(0.0);
              expect(data.tax_receiver_id).to.be.a('number');
              expect(data.tax_receiver_id).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdWalletTransactions', function() {
        it('should call getCharactersCharacterIdWalletTransactions successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdWalletTransactions call and complete the assertions
          /*
          var character_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.from_id = 789;
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCharactersCharacterIdWalletTransactions(character_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCharactersCharacterIdWalletTransactions200Ok);
              expect(data.client_id).to.be.a('number');
              expect(data.client_id).to.be(0);
              expect(data._date).to.be.a(Date);
              expect(data._date).to.be(new Date());
              expect(data.is_buy).to.be.a('boolean');
              expect(data.is_buy).to.be(false);
              expect(data.is_personal).to.be.a('boolean');
              expect(data.is_personal).to.be(false);
              expect(data.journal_ref_id).to.be.a('number');
              expect(data.journal_ref_id).to.be("0");
              expect(data.location_id).to.be.a('number');
              expect(data.location_id).to.be("0");
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0);
              expect(data.transaction_id).to.be.a('number');
              expect(data.transaction_id).to.be("0");
              expect(data.type_id).to.be.a('number');
              expect(data.type_id).to.be(0);
              expect(data.unit_price).to.be.a('number');
              expect(data.unit_price).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdWallets', function() {
        it('should call getCorporationsCorporationIdWallets successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdWallets call and complete the assertions
          /*
          var corporation_id = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdWallets(corporation_id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdWallets200Ok);
              expect(data.balance).to.be.a('number');
              expect(data.balance).to.be(0.0);
              expect(data.division).to.be.a('number');
              expect(data.division).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdWalletsDivisionJournal', function() {
        it('should call getCorporationsCorporationIdWalletsDivisionJournal successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdWalletsDivisionJournal call and complete the assertions
          /*
          var corporation_id = 56;
          var division = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.If_None_Match = "If_None_Match_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdWalletsDivisionJournal(corporation_id, division, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdWalletsDivisionJournal200Ok);
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.balance).to.be.a('number');
              expect(data.balance).to.be(0.0);
              expect(data.context_id).to.be.a('number');
              expect(data.context_id).to.be("0");
              expect(data.context_id_type).to.be.a('string');
              expect(data.context_id_type).to.be("structure_id");
              expect(data._date).to.be.a(Date);
              expect(data._date).to.be(new Date());
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.first_party_id).to.be.a('number');
              expect(data.first_party_id).to.be(0);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.reason).to.be.a('string');
              expect(data.reason).to.be("");
              expect(data.ref_type).to.be.a('string');
              expect(data.ref_type).to.be("acceleration_gate_fee");
              expect(data.second_party_id).to.be.a('number');
              expect(data.second_party_id).to.be(0);
              expect(data.tax).to.be.a('number');
              expect(data.tax).to.be(0.0);
              expect(data.tax_receiver_id).to.be.a('number');
              expect(data.tax_receiver_id).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdWalletsDivisionTransactions', function() {
        it('should call getCorporationsCorporationIdWalletsDivisionTransactions successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdWalletsDivisionTransactions call and complete the assertions
          /*
          var corporation_id = 56;
          var division = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.from_id = 789;
          opts.If_None_Match = "If_None_Match_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdWalletsDivisionTransactions(corporation_id, division, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveApi.GetCorporationsCorporationIdWalletsDivisionTransactions200Ok);
              expect(data.client_id).to.be.a('number');
              expect(data.client_id).to.be(0);
              expect(data._date).to.be.a(Date);
              expect(data._date).to.be(new Date());
              expect(data.is_buy).to.be.a('boolean');
              expect(data.is_buy).to.be(false);
              expect(data.journal_ref_id).to.be.a('number');
              expect(data.journal_ref_id).to.be("0");
              expect(data.location_id).to.be.a('number');
              expect(data.location_id).to.be("0");
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0);
              expect(data.transaction_id).to.be.a('number');
              expect(data.transaction_id).to.be("0");
              expect(data.type_id).to.be.a('number');
              expect(data.type_id).to.be(0);
              expect(data.unit_price).to.be.a('number');
              expect(data.unit_price).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
